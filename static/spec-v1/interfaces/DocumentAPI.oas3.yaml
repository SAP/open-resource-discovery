# THIS FILE IS AUTO GENERATED - DO NOT MODIFY!
openapi: 3.0.0
info:
  description: >-
    Open Resource Discovery (ORD) is a protocol that standardizes how applications and services publish and discover
    their exposed resources such as APIs and Events.


    This API is an implementation of the [ORD Document API](../index.md#ord-document-api).
  version: 1.2.0
  title: Open Resource Discovery Document API
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  contact:
    email: info@sap.com
    name: SAP SE
    url: https://www.sap.com/
externalDocs:
  description: Open Resource Discovery Specification (internal link)
  url: https://sap.github.io/open-resource-discovery
tags:
  - name: OpenResourceDiscovery
x-sap-api-type: REST
x-sap-shortText: Implementation of the Open Resource Discovery 1.x Service Provider Interface
x-sap-stateInfo:
  state: Active
paths:
  /.well-known/open-resource-discovery:
    get:
      summary: Get the Open Resource Discovery .well-known configuration
      description: |-
        This endpoint provides a [Well-Known URI](https://tools.ietf.org/html/rfc8615#section-3) discovery mechanism.
        It must be used for endpoint and capability discovery
      operationId: getConfiguration
      tags:
        - OpenResourceDiscovery
      responses:
        '200':
          description: Open Resource Discovery .well-known Configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Configuration'
        '304':
          $ref: '#/components/responses/304'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /open-resource-discovery/v1/documents/{id}:
    get:
      summary: Get an ORD Document
      description: This operation will retrieve a complete ORD Document with the given name / id.
      operationId: getDocument
      tags:
        - OpenResourceDiscovery
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: The ORD Document ID / name
      responses:
        '200':
          description: Open Resource Discovery Document
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
        '304':
          $ref: '#/components/responses/304'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
components:
  responses:
    '304':
      description: Not Modified
    '401':
      description: Unauthorized - Action requires user authentication.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            response:
              value:
                error:
                  code: UNAUTHORIZED
                  message: To access the API, you have to login
    '403':
      description: User or client is not authorized to perform the requested operation
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            response:
              value:
                error:
                  code: FORBIDDEN
                  message: User or client is not authorized to perform the requested operation.
    '404':
      description: Not Found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            response:
              value:
                error:
                  code: NOT_FOUND
                  message: Requested resource not found.
    '500':
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            response:
              value:
                error:
                  code: INTERNAL_SERVER_ERROR
                  message: >-
                    Internal server error occurred, retry after some time. In case the issue persists contact your
                    system administrator.
  schemas:
    ErrorResponse:
      type: object
      title: Error
      properties:
        error:
          $ref: '#/components/schemas/Error'
    Error:
      type: object
      title: Error Item
      properties:
        code:
          type: string
          title: Technical code of the error situation to be used for support purposes
        message:
          type: string
          title: User-facing (localizable) message, describing the error
        target:
          type: string
          title: Describes the error related data element (e.g. using a resource path)
        details:
          type: array
          title: Error Details
          items:
            $ref: '#/components/schemas/DetailError'
      additionalProperties: true
      required:
        - code
        - message
    DetailError:
      type: object
      title: Detail Error
      description: Error data that can be placed in the ErrorItem.details array
      properties:
        code:
          type: string
          title: Technical code of the error situation to be used for support purposes
        message:
          type: string
          title: User-facing (localizable) message, describing the error
      additionalProperties: true
      required:
        - code
        - message
    Document:
      title: ORD Document
      type: object
      description: >-
        The [ORD Document](../index.md#ord-document) object serves as a wrapper for the **ORD resources** and **ORD
        taxonomy** and adds further top-level information

        that are specific to the document/the service it describes.


        The constraints and considerations on [ORD Documents](../index.md#ord-document) MUST be followed.
      properties:
        $schema:
          type: string
          format: uri-reference
          description: >-
            An optional [URL](https://tools.ietf.org/html/rfc3986) to the Open Resource Discovery document schema
            (Defined as a JSON Schema).


            If provided, this enables code intelligence and validation in supported editors (like VSCode) and tools.
          example: >-
            https://raw.githubusercontent.com/SAP/open-resource-discovery/main/static/spec-v1/interfaces/Document.schema.json
        openResourceDiscovery:
          type: string
          description: Version of the Open Resource Discovery specification that is used to describe this document.
          enum:
            - '1.0'
            - '1.1'
            - '1.2'
            - '1.3'
            - '1.4'
            - '1.5'
            - '1.6'
            - '1.7'
            - '1.8'
          example: '1.8'
        description:
          type: string
          minLength: 1
          description: |-
            Optional description of the ORD document itself.
            Please note that this information is NOT further processed or considered by an ORD aggregator.

            Notated in [CommonMark](https://spec.commonmark.org/) (Markdown).
          example: |
            This ORD document contains all APIs that are system instance aware and have APIs that
            can change their behavior at runtime.
        describedSystemInstance:
          $ref: '#/components/schemas/SystemInstance'
        policyLevel:
          type: string
          description: >
            The [policy level](../../spec-extensions/access-strategies/) (aka. compliance level) that this ORD Document
            or part of it needs to be compliant with.

            Depending on the chosen policy level, certain expectations and validations rules will be applied.


            The policy level can be defined on ORD Document level, but also be overwritten on an individual package or
            resource level.


            If not provided, no additional policy level expectations and validations apply.
          enum:
            - none
            - sap:core:v1
            - custom
          example: sap:core:v1
        customPolicyLevel:
          type: string
          description: >-
            If the fixed `policyLevel` values need to be extended, an arbitrary `customPolicyLevel` can be provided.


            The policy level is inherited from packages to resources they contain, but can be overwritten at resource
            level.


            MUST only be provided if `policyLevel` is set to `custom`.


            MUST be a valid [Specification ID](../index.md#specification-id).
          pattern: ^([a-z0-9]+(?:[.][a-z0-9]+)*):([a-zA-Z0-9._\-]+):(v0|v[1-9][0-9]*)$
          maxLength: 255
          example: sap.xref:customPolicy:v1
        apiResources:
          type: array
          description: Array of all API Resources that are described in this ORD document.
          items:
            $ref: '#/components/schemas/APIResource'
        eventResources:
          type: array
          description: Array of all event resources that are described in this ORD document.
          items:
            $ref: '#/components/schemas/EventResource'
        entityTypes:
          type: array
          description: Array of all entity types that are described in this ORD document.
          items:
            $ref: '#/components/schemas/EntityType'
        capabilities:
          type: array
          description: Array of all capabilities that are described in this ORD document.
          items:
            $ref: '#/components/schemas/Capability'
        dataProducts:
          type: array
          description: Array of all data products that are described in this ORD document.
          items:
            $ref: '#/components/schemas/DataProduct'
        integrationDependencies:
          type: array
          description: Array of all integration dependencies that are described in this ORD document.
          items:
            $ref: '#/components/schemas/IntegrationDependency'
        vendors:
          type: array
          description: Array of all Vendors that are described in this ORD document.
          items:
            $ref: '#/components/schemas/Vendor'
        products:
          type: array
          description: Array of all Products that are described in this ORD document.
          items:
            $ref: '#/components/schemas/Product'
        packages:
          type: array
          description: Array of all Packages that are described in this ORD document.
          items:
            $ref: '#/components/schemas/Package'
        consumptionBundles:
          type: array
          description: Array of all Consumption Bundles that are described in this ORD document.
          items:
            $ref: '#/components/schemas/ConsumptionBundle'
        tombstones:
          type: array
          description: |-
            List of ORD information (resources or taxonomy) that have been "tombstoned"/removed.
            This MUST be indicated explicitly, so that ORD aggregators and consumers can learn about the removal.

            A tombstone entry MAY be removed after a grace period of 31 days.
          items:
            $ref: '#/components/schemas/Tombstone'
      required:
        - openResourceDiscovery
    Package:
      type: object
      title: Package
      description: >-
        A **Package** organizes a set of related resources together, by considering all of the following concerns:


        * The resources are created by the same vendor or customer.

        * The resources are published together. They share the same development and publishing lifecycle and ownership.

        * The resources share certain aspects/taxonomy that is inherited down to them (e.g. `vendor`).

        * If applicable: The resources are meant to be used by only a particular target platform / software.


        All resources that are not created by the described systems vendor MUST be put into separate packages.

        This is the case, when:


        * The resources are created by the customer (user) of the system.
          All such resources MUST be assigned to a dedicated Package, where `vendor` is set to `customer:vendor:Customer:`.
        * The resources are created by partners or third parties.
          All such resources MUST be assigned to a dedicated Package for each partner / third party.
          The `vendor` MUST be set to a registered, matching Vendor ID (implies also a registered namespace).

        Another responsibility of a package is human-readable documentation and presentation.

        It can also express information about the resource providers, terms of use of the APIs,

        pricing for the usage of the packages, APIs, Events, etc.


        A package SHOULD contain at least one resource. Avoid empty packages.


        A package does not have a `visibility` property.

        Whether it is displayed is decided by the fact, whether it contains any visible resources according to the
        visibility role of the aggregator.
      properties:
        ordId:
          type: string
          description: |-
            The [ORD ID](../index.md#ord-id) is a stable, globally unique ID for ORD resources or taxonomy.

            It MUST be a valid [ORD ID](../index.md#ord-id) of the appropriate ORD type.
          pattern: ^([a-z0-9]+(?:[.][a-z0-9]+)*):(package):([a-zA-Z0-9._\-]+):(v0|v[1-9][0-9]*)$
          maxLength: 255
          example: sap.xref:package:SomePackage:v1
        title:
          type: string
          description: |-
            Human-readable title.

            MUST NOT exceed 255 chars.
            MUST NOT contain line breaks.
          minLength: 1
          maxLength: 255
          example: SAP S/4HANA Cloud
        shortDescription:
          type: string
          description: |-
            Plain text short description.

            MUST NOT exceed 255 chars.
            MUST NOT contain line breaks.
          minLength: 1
          maxLength: 255
          example: SAP S/4HANA Cloud, our next generation cloud ERP suite designed for in-memory computing.
        description:
          type: string
          minLength: 1
          description: Full description, notated in [CommonMark](https://spec.commonmark.org/) (Markdown).
          example: |
            SAP S/4HANA Cloud, our next generation cloud ERP suite designed for
            in-memory computing, acts as a digital core, connecting your
            enterprise with people, business networks, the Internet of Things,
            Big Data, and more.
        version:
          type: string
          description: >-
            The complete [SemVer](https://semver.org/) version string.


            It MUST follow the [Semantic Versioning 2.0.0](https://semver.org/) standard.

            It SHOULD be changed if the ORD information or referenced resource definitions changed.

            It SHOULD express minor and patch changes that don't lead to incompatible changes.


            When the `version` major version changes, the [ORD ID](#ord-id) `<majorVersion>` fragment MUST be updated to
            be identical.

            In case that a resource definition file also contains a version number (e.g. [OpenAPI
            `info`.`version`](https://swagger.io/specification/#info-object)), it MUST be equal with the resource
            `version` to avoid inconsistencies.


            The general [Version and Lifecycle](../index.md#version-and-lifecycle) flow MUST be followed.


            Note: A change is only relevant for a version increment, if it affects the ORD resource or ORD taxonomy
            directly.

            For example: If a resource within a `Package` changes, but the package itself did not, the package version
            does not need to be incremented.
          pattern: >-
            ^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$
          example: 1.2.3
        policyLevel:
          type: string
          description: >
            The [policy level](../../spec-extensions/access-strategies/) (aka. compliance level) that this ORD Document
            or part of it needs to be compliant with.

            Depending on the chosen policy level, certain expectations and validations rules will be applied.


            The policy level can be defined on ORD Document level, but also be overwritten on an individual package or
            resource level.


            If not provided, no additional policy level expectations and validations apply.
          enum:
            - none
            - sap:core:v1
            - custom
          example: sap:core:v1
        customPolicyLevel:
          type: string
          description: >-
            If the fixed `policyLevel` values need to be extended, an arbitrary `customPolicyLevel` can be provided.


            The policy level is inherited from packages to resources they contain, but can be overwritten at resource
            level.


            MUST only be provided if `policyLevel` is set to `custom`.


            MUST be a valid [Specification ID](../index.md#specification-id).
          pattern: ^([a-z0-9]+(?:[.][a-z0-9]+)*):([a-zA-Z0-9._\-]+):(v0|v[1-9][0-9]*)$
          maxLength: 255
          example: sap.xref:customPolicy:v1
        packageLinks:
          type: array
          description: Links with semantic meaning that are specific to packages.
          items:
            $ref: '#/components/schemas/PackageLink'
        links:
          type: array
          description: |-
            Generic links with arbitrary meaning and content.

            `packageLinks` MUST be preferred if applicable.
          items:
            $ref: '#/components/schemas/Link'
        licenseType:
          type: string
          minLength: 1
          description: |-
            Standardized identifier for the license.
            It MUST conform to the [SPDX License List](https://spdx.org/licenses).
        supportInfo:
          type: string
          minLength: 1
          description: >-
            Optional information that should be provided when creating a support ticket for the resources bundled in
            this package.

            This can for example be a "component" name that needs to be chosen in the support portal.


            Notated in [CommonMark](https://spec.commonmark.org/) (Markdown).


            Please also note that if you want to provide link(s) where you can find support information,

            you can use `packageLinks` with a link of type `support`.
        vendor:
          type: string
          description: >-
            Vendor / organization that is the creator (or responsible party) of the resources that are part of the
            `Package`.


            MUST be a valid reference to a [Vendor](#vendor) ORD ID.


            MUST be set to `customer:vendor:Customer:` if the contents of the package are created by the customer /
            user.


            MUST be set to a registered partner vendor, if the contents of the package are created by a partner / third
            party.
          pattern: ^([a-z0-9]+(?:[.][a-z0-9]+)*):(vendor):([a-zA-Z0-9._\-]+):()$
          maxLength: 256
          example: 'sap:vendor:SAP:'
        partOfProducts:
          type: array
          description: |-
            List of products this resource is a part of.

            MUST be a valid reference to a [Product](#product) ORD ID.

            `partOfProducts` that are assigned to a `Package` are inherited to all of the ORD resources it contains.
          items:
            type: string
            pattern: ^([a-z0-9]+(?:[.][a-z0-9]+)*):(product):([a-zA-Z0-9._\-]+):()$
            maxLength: 255
          minItems: 0
          example:
            - 'sap:product:S4HANA_OD:'
        countries:
          type: array
          items:
            type: string
            pattern: ^[A-Z]{2}$
          description: >-
            List of countries that the package resources are applicable to.


            MUST be expressed as an array of country codes according to [IES ISO-3166
            ALPHA-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).


            `countries` that are assigned to a `Package` are inherited to all of the ORD resources it contains.
          example:
            - DE
            - US
        lineOfBusiness:
          type: array
          items:
            type: string
            pattern: ^[a-zA-Z0-9-_.\/& ]*$
            minLength: 1
            anyOf:
              - type: string
              - enum:
                  - Asset Management
              - enum:
                  - Commerce
              - enum:
                  - Finance
              - enum:
                  - Human Resources
              - enum:
                  - Manufacturing
              - enum:
                  - Marketing
              - enum:
                  - R&D Engineering
              - enum:
                  - Sales
              - enum:
                  - Service
              - enum:
                  - Sourcing and Procurement
              - enum:
                  - Supply Chain
              - enum:
                  - Sustainability
              - enum:
                  - Metering
              - enum:
                  - Grid Operations and Maintenance
              - enum:
                  - Plant Operations and Maintenance
              - enum:
                  - Maintenance and Engineering
          description: |-
            List of line of business tags.
            No special characters are allowed except `-`, `_`, `.`, `/` and ` `.

            `lineOfBusiness` that are assigned to a `Package` are inherited to all of the ORD resources it contains.
          example:
            - Sales
        industry:
          type: array
          items:
            type: string
            pattern: ^[a-zA-Z0-9-_.\/& ]*$
            minLength: 1
            anyOf:
              - type: string
              - enum:
                  - Aerospace and Defense
              - enum:
                  - Automotive
              - enum:
                  - Banking
              - enum:
                  - Chemicals
              - enum:
                  - Consumer Products
              - enum:
                  - Defense and Security
              - enum:
                  - Engineering Construction and Operations
              - enum:
                  - Healthcare
              - enum:
                  - Higher Education and Research
              - enum:
                  - High Tech
              - enum:
                  - Industrial Machinery and Components
              - enum:
                  - Insurance
              - enum:
                  - Life Sciences
              - enum:
                  - Media
              - enum:
                  - Mill Products
              - enum:
                  - Mining
              - enum:
                  - Oil and Gas
              - enum:
                  - Professional Services
              - enum:
                  - Public Sector
              - enum:
                  - Retail
              - enum:
                  - Sports and Entertainment
              - enum:
                  - Telecommunications
              - enum:
                  - Travel and Transportation
              - enum:
                  - Utilities
              - enum:
                  - Wholesale Distribution
          description: |-
            List of industry tags.
            No special characters are allowed except `-`, `_`, `.`, `/` and ` `.

            `industry` that are assigned to a `Package` are inherited to all of the ORD resources it contains.
          example:
            - Automotive
        runtimeRestriction:
          title: Runtime Restriction
          description: If provided, all resources that are part of this package can only run on the listed runtime.
          type: string
          enum:
            - sap.datasphere
        tags:
          type: array
          items:
            type: string
            pattern: ^[a-zA-Z0-9-_.\/ ]*$
            minLength: 1
          description: |-
            List of free text style tags.
            No special characters are allowed except `-`, `_`, `.`, `/` and ` `.

            Tags that are assigned to a `Package` are inherited to all of the ORD resources it contains.
          example:
            - storage
            - high-availability
        labels:
          $ref: '#/components/schemas/Labels'
        documentationLabels:
          $ref: '#/components/schemas/DocumentationLabels'
      required:
        - ordId
        - title
        - shortDescription
        - description
        - version
        - vendor
    ConsumptionBundle:
      type: object
      title: Consumption Bundle
      description: >-
        A **Consumption Bundle** organizes a set of related resources into a single group for consumption purposes.


        The main use case is to enable developers to easily discover and access APIs and Events from the system
        instances they are extending.


        The consumption bundle expresses information about how the APIs and Events that it contains can be accessed.

        This potentially also includes instructions and details how to request access and credentials for resources.


        All resources that are part of the same consumption bundle MUST be accessible through the same set of
        credentials.

        Such credentials can be programmatically obtained via one of the provided `credentialExchangeStrategies`.


        A consumption bundle SHOULD have at least one association with a resource (0..n). Avoid empty consumption
        bundles.

        A consumption bundle MUST NOT contain APIs and Events that are NOT defined in the ORD document(s) returned

        by the system instance that defines the consumption bundle.


        Please note that some ORD consumer use cases MAY depend on consumption bundle assignments to work with the
        resources.
      properties:
        ordId:
          type: string
          description: |-
            The [ORD ID](../index.md#ord-id) is a stable, globally unique ID for ORD resources or taxonomy.

            It MUST be a valid [ORD ID](../index.md#ord-id) of the appropriate ORD type.
          pattern: ^([a-z0-9]+(?:[.][a-z0-9]+)*):(consumptionBundle):([a-zA-Z0-9._\-]+):(v0|v[1-9][0-9]*)$
          maxLength: 255
          example: sap.xref:consumptionBundle:bundleXYZ:v1
        localId:
          type: string
          description: Local ID, as known by the described system.
          maxLength: 255
          example: bundleXYZ
        correlationIds:
          type: array
          description: >-
            Correlation IDs can be used to create a reference to related data in other repositories (especially to the
            system of record).


            MUST be a valid [Correlation ID](../index.md#correlation-id).
          items:
            type: string
            pattern: ^([a-z0-9]+(?:[.][a-z0-9]+)*):([a-zA-Z0-9._\-\/]+):([a-zA-Z0-9._\-\/]+)$
            maxLength: 255
          example:
            - sap.s4:communicationScenario:SAP_COM_0008
        title:
          type: string
          description: |-
            Human-readable title.

            MUST NOT exceed 255 chars.
            MUST NOT contain line breaks.
          minLength: 1
          maxLength: 255
          example: SAP LoB System 3 Cloud Consumption Bundle 1
        shortDescription:
          type: string
          description: |-
            Plain text short description.

            MUST NOT exceed 255 chars.
            MUST NOT contain line breaks.
          minLength: 1
          maxLength: 255
          example: SAP LoB System 3 Cloud, cloud ERP suite designed for in-memory computing
        description:
          type: string
          minLength: 1
          description: Full description, notated in [CommonMark](https://spec.commonmark.org/) (Markdown).
          example: |
            This consumption bundle includes all SAP LoB System 3 Cloud APIs and Events
            that can be consumed with the same credentials.
        version:
          type: string
          description: >-
            The complete [SemVer](https://semver.org/) version string.


            It MUST follow the [Semantic Versioning 2.0.0](https://semver.org/) standard.

            It SHOULD be changed if the ORD information or referenced resource definitions changed.

            It SHOULD express minor and patch changes that don't lead to incompatible changes.


            When the `version` major version changes, the [ORD ID](#ord-id) `<majorVersion>` fragment MUST be updated to
            be identical.

            In case that a resource definition file also contains a version number (e.g. [OpenAPI
            `info`.`version`](https://swagger.io/specification/#info-object)), it MUST be equal with the resource
            `version` to avoid inconsistencies.


            The general [Version and Lifecycle](../index.md#version-and-lifecycle) flow MUST be followed.


            Note: A change is only relevant for a version increment, if it affects the ORD resource or ORD taxonomy
            directly.

            For example: If a resource within a `Package` changes, but the package itself did not, the package version
            does not need to be incremented.
          pattern: >-
            ^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$
          example: 1.2.3
        lastUpdate:
          type: string
          format: date-time
          description: >-
            Optional, but RECOMMENDED indicator when (date-time) the last change to the resource (including its
            definitions) happened.


            The date format MUST comply with [RFC 3339, section 5.6](https://tools.ietf.org/html/rfc3339#section-5.6).


            In case that this property is available and the value of it hasn't changed since the last crawling, the
            resource definitions do not need to be fetched and updated.


            Together with `systemInstanceAware`, this property SHOULD be used to optimize the metadata crawling process
            of the ORD aggregators.
          example: '2022-12-19T15:47:04+00:00'
        credentialExchangeStrategies:
          type: array
          description: |-
            Defines the supported strategies for how the consumption credentials can be exchanged.

            Ideally, the system type supports a strategy that can automate the exchange.
          items:
            $ref: '#/components/schemas/CredentialExchangeStrategy'
        links:
          type: array
          description: Generic links with arbitrary meaning and content.
          items:
            $ref: '#/components/schemas/Link'
        tags:
          type: array
          items:
            type: string
            pattern: ^[a-zA-Z0-9-_.\/ ]*$
            minLength: 1
          description: |-
            List of free text style tags.
            No special characters are allowed except `-`, `_`, `.`, `/` and ` `.

            Tags that are assigned to a `Package` are inherited to all of the ORD resources it contains.
          example:
            - storage
            - high-availability
        labels:
          $ref: '#/components/schemas/Labels'
        documentationLabels:
          $ref: '#/components/schemas/DocumentationLabels'
      required:
        - ordId
        - title
    ConsumptionBundleReference:
      type: object
      title: Consumption Bundle Reference
      description: |-
        Reference to a Consumption bundle.

        This is a complex object to allow additional properties / selections to be attached.
      properties:
        ordId:
          type: string
          description: The consumption bundle ORD ID (`ConsumptionBundle.ordId`) this reference points to.
          pattern: ^([a-z0-9]+(?:[.][a-z0-9]+)*):(consumptionBundle):([a-zA-Z0-9._\-]+):(v0|v[1-9][0-9]*)$
          maxLength: 255
          example: sap.xref:consumptionBundle:bundleXYZ:v1
        defaultEntryPoint:
          type: string
          format: uri-reference
          description: >-
            In case that an API Resource has multiple entry points, this will indicate which entry point should be used
            by default

            when discovering this resource from the context of the referenced Consumption Bundle.


            MUST NOT be provided for Event Resources, as they don't have entry points.

            MUST only be provided if the resource has more than one entry point.

            MUST be in the list of `entryPoints` of the affected resource.
      required:
        - ordId
    APIResource:
      type: object
      title: API Resource
      description: >-
        The API Resource provides a high-level description of an exposed API.

        You can find more information, such as the API resource definitions, in the links in the table below.


        An API Resource bundles multiple endpoints and resources together.

        They share the same API namespace and lifecycle (API major version).

        However, the exact granularity of this is up to the implementer of the API.

        As a consequence, an API resource MUST NOT bundle together endpoints from different API versions or namespaces.


        A common practice is to bundle endpoints that are based on the same domain or Business Object.


        Please note that APIs can be described, but still be [`disabled`](#api-resource_disabled).


        If the API is not created or owned by the user of the system or by third parties (like partners), it MUST be
        assigned to dedicated [Packages](#package) that state this the ownership via the `vendor` property.
      properties:
        ordId:
          type: string
          description: |-
            The [ORD ID](../index.md#ord-id) is a stable, globally unique ID for ORD resources or taxonomy.

            It MUST be a valid [ORD ID](../index.md#ord-id) of the appropriate ORD type.
          pattern: ^([a-z0-9]+(?:[.][a-z0-9]+)*):(apiResource):([a-zA-Z0-9._\-]+):(v0|v[1-9][0-9]*)$
          maxLength: 255
          example: sap.s4:apiResource:API_BILL_OF_MATERIAL_SRV:v1
        localId:
          type: string
          description: Local ID, as known by the described system.
          maxLength: 255
          example: API_BILL_OF_MATERIAL_SRV
        correlationIds:
          type: array
          description: >-
            Correlation IDs can be used to create a reference to related data in other repositories (especially to the
            system of record).


            MUST be a valid [Correlation ID](../index.md#correlation-id).
          items:
            type: string
            pattern: ^([a-z0-9]+(?:[.][a-z0-9]+)*):([a-zA-Z0-9._\-\/]+):([a-zA-Z0-9._\-\/]+)$
            maxLength: 255
          example:
            - sap.xref:csnService:SomeLocalID
        title:
          type: string
          description: |-
            Human-readable title.

            MUST NOT exceed 255 chars.
            MUST NOT contain line breaks.
          minLength: 1
          maxLength: 255
          example: Process Request for Quotation
        shortDescription:
          type: string
          description: |-
            Plain text short description.

            MUST NOT exceed 255 chars.
            MUST NOT contain line breaks.
          minLength: 1
          maxLength: 255
          example: This service enables you to create Request for Quotation (RFQ) through an API call.
        description:
          type: string
          minLength: 1
          description: Full description, notated in [CommonMark](https://spec.commonmark.org/) (Markdown).
          example: |
            This service enables you to create Request for Quotation (RFQ)
            through an API call from a source system outside SAP S/4HANA Cloud
            or SAP S/4HANA on-Premise. Furthermore, the service enables you to
            read existing Request for Quotation data from the SAP S/4HANA Cloud
            or SAP S/4HANA on-Premise.
        partOfPackage:
          type: string
          pattern: ^([a-z0-9]+(?:[.][a-z0-9]+)*):(package):([a-zA-Z0-9._\-]+):(v0|v[1-9][0-9]*)$
          maxLength: 255
          description: |-
            Defines which Package the resource is part of.

            MUST be a valid reference to a [Package](#package) ORD ID.

            Every resource MUST be part of one package.
          example: sap.xref:package:SomePackage:v1
        partOfConsumptionBundles:
          type: array
          description: >-
            List of references to the consumption bundles in this resource belongs to.


            MUST be a valid reference to a [Consumption Bundle](#consumption-bundle) ORD ID.


            An API resource SHOULD be associated to one or multiple consumption bundles, if it is of direction `inbound`
            or `mixed`.

            Some ORD consumer use cases MAY depend on an association to a consumption bundle.

            If none is given, the resource may not appear as it's unknown how it can be consumed.


            If a resource has no direct incoming consumption characteristics:

            - MUST NOT assign consumption bundle to API or Event resources with `direction`: `outbound` (no inbound
            consumption)

            - MUST NOT assign consumption bundle if resource is not accessible directly, but only via intermediaries
            like event brokers or gateways.
              - In this case the intermediary SHOULD describe the consumption bundle instead (potentially also re-describing the resources as well).
          items:
            $ref: '#/components/schemas/ConsumptionBundleReference'
          example:
            - ordId: sap.xref:consumptionBundle:bundleXYZ:v1
        defaultConsumptionBundle:
          type: string
          description: |-
            References the default consumption bundle to use for this resource.

            MUST be a valid reference to a [Consumption Bundle](#consumption-bundle) ORD ID.

            Can be used by clients to make a deterministic and preferred choice when multiple options are available.

            The value MUST be an existing option in the corresponding `partOfConsumptionBundles` array.
          pattern: ^([a-z0-9]+(?:[.][a-z0-9]+)*):(consumptionBundle):([a-zA-Z0-9._\-]+):(v0|v[1-9][0-9]*)$
          maxLength: 255
          example: sap.xref:consumptionBundle:bundleXYZ:v1
        partOfProducts:
          type: array
          description: |-
            List of products this resource is a part of.

            MUST be a valid reference to a [Product](#product) ORD ID.

            `partOfProducts` that are assigned to a `Package` are inherited to all of the ORD resources it contains.
          items:
            type: string
            pattern: ^([a-z0-9]+(?:[.][a-z0-9]+)*):(product):([a-zA-Z0-9._\-]+):()$
            maxLength: 255
          minItems: 0
          example:
            - 'sap:product:S4HANA_OD:'
        version:
          type: string
          description: >-
            The complete [SemVer](https://semver.org/) version string.


            It MUST follow the [Semantic Versioning 2.0.0](https://semver.org/) standard.

            It SHOULD be changed if the ORD information or referenced resource definitions changed.

            It SHOULD express minor and patch changes that don't lead to incompatible changes.


            When the `version` major version changes, the [ORD ID](#ord-id) `<majorVersion>` fragment MUST be updated to
            be identical.

            In case that a resource definition file also contains a version number (e.g. [OpenAPI
            `info`.`version`](https://swagger.io/specification/#info-object)), it MUST be equal with the resource
            `version` to avoid inconsistencies.


            The general [Version and Lifecycle](../index.md#version-and-lifecycle) flow MUST be followed.


            Note: A change is only relevant for a version increment, if it affects the ORD resource or ORD taxonomy
            directly.

            For example: If a resource within a `Package` changes, but the package itself did not, the package version
            does not need to be incremented.
          pattern: >-
            ^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$
          example: 1.2.3
        lastUpdate:
          type: string
          format: date-time
          description: >-
            Optional, but RECOMMENDED indicator when (date-time) the last change to the resource (including its
            definitions) happened.


            The date format MUST comply with [RFC 3339, section 5.6](https://tools.ietf.org/html/rfc3339#section-5.6).


            In case that this property is available and the value of it hasn't changed since the last crawling, the
            resource definitions do not need to be fetched and updated.


            Together with `systemInstanceAware`, this property SHOULD be used to optimize the metadata crawling process
            of the ORD aggregators.
          example: '2022-12-19T15:47:04+00:00'
        visibility:
          type: string
          description: |-
            The visibility/exposure of the described resource.
            This indicates who is allowed to see (and implicitly also access) the described resource.
          enum:
            - public
            - internal
            - private
        releaseStatus:
          type: string
          description: The `releaseStatus` specifies the stability of the resource and its external contract.
          enum:
            - active
            - beta
            - deprecated
          example: active
        disabled:
          type: boolean
          default: false
          description: >
            Indicates that this resource is currently not available for consumption at runtime, but could be configured
            to be so.

            This can happen either because it has not been setup for use or disabled by an admin / user.


            If the resource is not available in principle for a particular system instance, e.g. due to lack of
            entitlement, it MUST not be described in the system-instance aware perspective.


            This only needs to reflect the knowledge of the described system instance itself,

            meaning that outside factors don't need to be considered (e.g. network connectivity, middlewares).

            This information may be of relevance for some ORD consumers that need to filter for active or disabled APIs.


            A disabled resource MAY skip describing its resource definitions.
        deprecationDate:
          type: string
          format: date-time
          description: >-
            The deprecation date defines when the resource has been set as deprecated.

            This is not to be confused with the `sunsetDate` which defines when the resource will be actually
            decommissioned / removed.


            If the `releaseStatus` is set to `deprecated`, the `deprecationDate` SHOULD be provided.


            The date format MUST comply with [RFC 3339, section 5.6](https://tools.ietf.org/html/rfc3339#section-5.6).
          example: '2020-12-08T15:47:04+00:00'
        sunsetDate:
          type: string
          format: date-time
          description: |-
            The sunset date defines when the resource is scheduled to be decommissioned/removed.

            If the `releaseStatus` is set to `deprecated`, the `sunsetDate` MUST be provided.

            The date format MUST comply with [RFC 3339, section 5.6](https://tools.ietf.org/html/rfc3339#section-5.6).
          example: '2022-01-08T15:47:04+00:00'
        successors:
          type: array
          description: |-
            The successor resource(s).

            MUST be a valid reference to an ORD ID.

            If the `releaseStatus` is set to `deprecated`, `successors` MUST be provided if one exists.
          items:
            type: string
            pattern: ^([a-z0-9]+(?:[.][a-z0-9]+)*):(apiResource):([a-zA-Z0-9._\-]+):(v0|v[1-9][0-9]*)$
            maxLength: 255
          example:
            - sap.s4:apiResource:API_BILL_OF_MATERIAL_SRV:v2
        changelogEntries:
          type: array
          description: Contains changelog entries that summarize changes with special regards to version and releaseStatus
          items:
            $ref: '#/components/schemas/ChangelogEntry'
        entryPoints:
          type: array
          description: >-
            List of [URL reference](https://tools.ietf.org/html/rfc3986#section-4.1) (URL or relative reference) to the
            target host.


            If the API resource can be accessed through an entry point, it MUST be described here.


            The list of entry points MUST not include duplicates.

            If multiple entry points are provided they MUST be arbitrarily exchangeable without effects.

            This means that the URLs are just an alias to each other and the `resourceDefinitions` apply to all entry
            points equally.

            In case of multiple entry points it is RECOMMENDED to provide a `defaultEntryPoint` through
            `partOfConsumptionBundles`.

            The entry point URLs SHOULD match with the target host(s) in the resource definition files (e.g. OpenAPI
            `servers`).

            If there is no match, the information in ORD takes precedence.


            **Provider View:**

            If the URL is relative to the system that describes the ORD information,

            it is RECOMMENDED to use relative references and (if known) to provide the
            `describedSystemInstance`.`baseUrl`.

            If the URL is not relative to the described system instance [base URL](../index.md#def-base-url), a full URL
            MUST be provided.


            **Consumer View**:

            When fetching the information from an ORD Aggregator, the consumer MAY rely on receiving full URLs.
          items:
            type: string
            format: uri-reference
          minItems: 0
          example:
            - /api-namespace/v1
        direction:
          type: string
          description: >-
            Direction of the API Resource consumption.

            If not provided, "inbound" is assumed.


            In case of SOAP APIs, the direction is already indicated through the `apiProtocol`, making this property
            redundant and optional. But if it is provided, it MUST not be in contradiction with the `apiProtocol`
            direction.
          default: inbound
          enum:
            - inbound
            - mixed
            - outbound
        apiProtocol:
          type: string
          description: API Protocol including the protocol version if applicable
          enum:
            - odata-v2
            - odata-v4
            - rest
            - graphql
            - delta-sharing
            - soap-inbound
            - soap-outbound
            - websocket
            - sap-rfc
            - sap-sql-api-v1
            - sap-ina-api-v1
          example: rest
        resourceDefinitions:
          type: array
          description: |-
            List of available machine-readable resource definitions.

            It is RECOMMENDED to provide the resource definitions as they enable machine-readable use cases.
            If resource definitions are added or changed, the `version` MUST be incremented.
            An ORD aggregator MAY only (re)fetch the resource definitions again when the `version` was incremented.
          items:
            $ref: '#/components/schemas/APIResourceDefinition'
        implementationStandard:
          type: string
          description: >-
            Declares this API to be a valid implementation of an externally standardized API contract, sub-protocol or
            protocol variant.


            All APIs that share the same implementation standard MAY be treated the same or similar by a consumer
            client.
          enum:
            - sap:ord-document-api:v1
            - cff:open-service-broker:v2
            - sap:csn-exposure:v1
            - sap:ape-api:v1
            - sap:cdi-api:v1
            - sap:hdlf-delta-sharing:v1
            - sap:hana-cloud-sql:v1
            - custom
          example: sap:ord-document-api:v1
        customImplementationStandard:
          type: string
          description: >-
            If the fixed `implementationStandard` values need to be extended, an arbitrary
            `customImplementationStandard` can be provided.


            MUST be a valid [Specification ID](../index.md#specification-id).


            MUST only be provided if `implementationStandard` is set to `custom`.
          pattern: ^([a-z0-9]+(?:[.][a-z0-9]+)*):([a-zA-Z0-9._\-]+):v([0-9]+)$
          maxLength: 255
          example: sap.xref:some-api-contract:v1
        customImplementationStandardDescription:
          type: string
          description: >-
            Full description of the custom implementation standard, notated in
            [CommonMark](https://spec.commonmark.org/) (Markdown).


            MUST only be provided if `implementationStandard` is set to `custom`.


            SHOULD contain documentation and links that describe the used standard.
          example: >-
            Implemented as defined in the [S/4HANA Attachment Service
            documentation](https://api.sap.com/api/API_CV_ATTACHMENT_SRV/overview)
        responsible:
          type: string
          pattern: ^([a-z0-9]+(?:[.][a-z0-9]+)*):([a-zA-Z0-9._\-\/]+):([a-zA-Z0-9._\-\/]+)$
          maxLength: 255
          description: >-
            Contains typically the organization that is responsible in the sense of RACI matrix for this ORD resource.
            This includes support and feature requests. It is maintained as correlation id to for example support
            components.
          example: sap:ach:CIC-DP-CO
        supportedUseCases:
          type: array
          description: >-
            List of use cases (types) how the resource is meant to be used for.


            This helps consumers better to understand which use cases had been in mind by the provider

            and are therefore explicitly supported.

            This is obviously described from a provider perspective, but stating what consumer use cases it potentially
            supports.

            As it's not possible to create a list of options that are mutually exclusive, all options that apply should
            be provided.


            If no array is defined, it is assumed that this information is not provided.
          items:
            type: string
            oneOf:
              - description: >-
                  Resources are designed to support [data
                  federation](https://en.wikipedia.org/wiki/Federated_database_system). This goes beyond plain queries,
                  but typically allowing connections on the data base level, in the context of a business user.

                  As consumers will directly access data, performance of the system must support these use cases.
                enum:
                  - data-federation
              - description: >-
                  Resource can be used to get a snapshot with inherent consistency including potential paging requests.
                  Such a snapshot might be the basis for incremental updates. A snapshot API is typically providing
                  unfiltered, complete mass data access by a technical user.

                  As data is typically replicated, performance of the API is important, but less critical for an
                  end-user experience.
                enum:
                  - snapshot
              - description: Resource gives incremental updates on top of snapshots.
                enum:
                  - incremental
              - description: >-
                  Resource can be used to get streaming updates. The difference to 'incremental' is that it doesn't need
                  a snapshot .
                enum:
                  - streaming
            enum:
              - data-federation
              - snapshot
              - incremental
              - streaming
          example:
            - data-federation
        usage:
          type: string
          title: Usage
          description: Define from where the API resource can be used and accessed
          default: external
          enum:
            - external
            - local
        entityTypeMappings:
          type: array
          description: >-
            Describes mappings between the API Models of the described resource to the underlying, conceptual entity
            types.
          items:
            $ref: '#/components/schemas/EntityTypeMapping'
        apiResourceLinks:
          type: array
          description: Links with semantic meaning that are specific to API Resources.
          items:
            $ref: '#/components/schemas/APIEventResourceLink'
        links:
          type: array
          description: |-
            Generic Links with arbitrary meaning and content.

            If applicable, `apiResourceLinks` MUST be used instead of generic `links`.
          items:
            $ref: '#/components/schemas/Link'
        extensible:
          $ref: '#/components/schemas/Extensible'
        countries:
          type: array
          items:
            type: string
            pattern: ^[A-Z]{2}$
          description: >-
            List of countries that the package resources are applicable to.


            MUST be expressed as an array of country codes according to [IES ISO-3166
            ALPHA-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).


            `countries` that are assigned to a `Package` are inherited to all of the ORD resources it contains.
          example:
            - DE
            - US
        lineOfBusiness:
          type: array
          items:
            type: string
            pattern: ^[a-zA-Z0-9-_.\/& ]*$
            minLength: 1
            anyOf:
              - type: string
              - enum:
                  - Asset Management
              - enum:
                  - Commerce
              - enum:
                  - Finance
              - enum:
                  - Human Resources
              - enum:
                  - Manufacturing
              - enum:
                  - Marketing
              - enum:
                  - R&D Engineering
              - enum:
                  - Sales
              - enum:
                  - Service
              - enum:
                  - Sourcing and Procurement
              - enum:
                  - Supply Chain
              - enum:
                  - Sustainability
              - enum:
                  - Metering
              - enum:
                  - Grid Operations and Maintenance
              - enum:
                  - Plant Operations and Maintenance
              - enum:
                  - Maintenance and Engineering
          description: |-
            List of line of business tags.
            No special characters are allowed except `-`, `_`, `.`, `/` and ` `.

            `lineOfBusiness` that are assigned to a `Package` are inherited to all of the ORD resources it contains.
          example:
            - Sales
        industry:
          type: array
          items:
            type: string
            pattern: ^[a-zA-Z0-9-_.\/& ]*$
            minLength: 1
            anyOf:
              - type: string
              - enum:
                  - Aerospace and Defense
              - enum:
                  - Automotive
              - enum:
                  - Banking
              - enum:
                  - Chemicals
              - enum:
                  - Consumer Products
              - enum:
                  - Defense and Security
              - enum:
                  - Engineering Construction and Operations
              - enum:
                  - Healthcare
              - enum:
                  - Higher Education and Research
              - enum:
                  - High Tech
              - enum:
                  - Industrial Machinery and Components
              - enum:
                  - Insurance
              - enum:
                  - Life Sciences
              - enum:
                  - Media
              - enum:
                  - Mill Products
              - enum:
                  - Mining
              - enum:
                  - Oil and Gas
              - enum:
                  - Professional Services
              - enum:
                  - Public Sector
              - enum:
                  - Retail
              - enum:
                  - Sports and Entertainment
              - enum:
                  - Telecommunications
              - enum:
                  - Travel and Transportation
              - enum:
                  - Utilities
              - enum:
                  - Wholesale Distribution
          description: |-
            List of industry tags.
            No special characters are allowed except `-`, `_`, `.`, `/` and ` `.

            `industry` that are assigned to a `Package` are inherited to all of the ORD resources it contains.
          example:
            - Automotive
        tags:
          type: array
          items:
            type: string
            pattern: ^[a-zA-Z0-9-_.\/ ]*$
            minLength: 1
          description: |-
            List of free text style tags.
            No special characters are allowed except `-`, `_`, `.`, `/` and ` `.

            Tags that are assigned to a `Package` are inherited to all of the ORD resources it contains.
          example:
            - storage
            - high-availability
        labels:
          $ref: '#/components/schemas/Labels'
        documentationLabels:
          $ref: '#/components/schemas/DocumentationLabels'
        policyLevel:
          type: string
          description: >
            The [policy level](../../spec-extensions/access-strategies/) (aka. compliance level) that this ORD Document
            or part of it needs to be compliant with.

            Depending on the chosen policy level, certain expectations and validations rules will be applied.


            The policy level can be defined on ORD Document level, but also be overwritten on an individual package or
            resource level.


            If not provided, no additional policy level expectations and validations apply.
          enum:
            - none
            - sap:core:v1
            - custom
          example: sap:core:v1
        customPolicyLevel:
          type: string
          description: >-
            If the fixed `policyLevel` values need to be extended, an arbitrary `customPolicyLevel` can be provided.


            The policy level is inherited from packages to resources they contain, but can be overwritten at resource
            level.


            MUST only be provided if `policyLevel` is set to `custom`.


            MUST be a valid [Specification ID](../index.md#specification-id).
          pattern: ^([a-z0-9]+(?:[.][a-z0-9]+)*):([a-zA-Z0-9._\-]+):(v0|v[1-9][0-9]*)$
          maxLength: 255
          example: sap.xref:customPolicy:v1
        systemInstanceAware:
          type: boolean
          description: >-
            Defines whether this ORD resource is **system instance aware**.

            This is the case (and relevant) when the referenced resource definitions are potentially different between
            **system instances**.


            If this behavior applies, `systemInstanceAware` MUST be set to true.

            An ORD aggregator that represents a system instance aware perspective MUST fetch the referenced resource
            definitions,

            not just once per system type, but once per **system instance**.
          default: false
          example: true
      required:
        - ordId
        - title
        - shortDescription
        - description
        - version
        - releaseStatus
        - apiProtocol
        - visibility
        - partOfPackage
    EventResource:
      type: object
      title: Event Resource
      description: >-
        The event resource provides a high-level description of a collection of related Events. More detailed
        information, such as the event resource definitions, are provided in links in the table below.

        Which events are considered "related" is up to the implementer. A common practice is to bundle events that are
        based on the same resource/Business Object. It is also an option to bundle all available events into a single
        event resource/event catalog.

        Please note that event resources can be described, but still be [`disabled`](#event-resource_disabled).

        If the event resource is not created or owned by the user / customer of the system or by partners / third
        parties, it MUST be assigned to dedicated [Packages](#package) that state this the ownership via the `vendor`
        property.
      properties:
        ordId:
          type: string
          description: |-
            The [ORD ID](../index.md#ord-id) is a stable, globally unique ID for ORD resources or taxonomy.

            It MUST be a valid [ORD ID](../index.md#ord-id) of the appropriate ORD type.
          pattern: ^([a-z0-9]+(?:[.][a-z0-9]+)*):(eventResource):([a-zA-Z0-9._\-]+):(v0|v[1-9][0-9]*)$
          maxLength: 255
          example: sap.billing.sb:eventResource:BusinessEvents_SubscriptionEvents:v1
        localId:
          type: string
          description: Local ID, as known by the described system.
          maxLength: 255
          example: BusinessEvents_SubscriptionEvents
        correlationIds:
          type: array
          description: >-
            Correlation IDs can be used to create a reference to related data in other repositories (especially to the
            system of record).


            MUST be a valid [Correlation ID](../index.md#correlation-id).
          items:
            type: string
            pattern: ^([a-z0-9]+(?:[.][a-z0-9]+)*):([a-zA-Z0-9._\-\/]+):([a-zA-Z0-9._\-\/]+)$
            maxLength: 255
          example:
            - sap.xref:localConcept:SomeLocalId
        title:
          type: string
          description: |-
            Human-readable title.

            MUST NOT exceed 255 chars.
            MUST NOT contain line breaks.
          minLength: 1
          maxLength: 255
          example: SalesOrder Events
        shortDescription:
          type: string
          description: |-
            Plain text short description.

            MUST NOT exceed 255 chars.
            MUST NOT contain line breaks.
          minLength: 1
          maxLength: 255
          example: All events related to the Business Object SalesOrder
        description:
          type: string
          minLength: 1
          description: Full description, notated in [CommonMark](https://spec.commonmark.org/) (Markdown).
          example: |
            This event is raised by the SAP S/4HANA Cloud system when an invoice document is cancelled.
        partOfPackage:
          type: string
          pattern: ^([a-z0-9]+(?:[.][a-z0-9]+)*):(package):([a-zA-Z0-9._\-]+):(v0|v[1-9][0-9]*)$
          maxLength: 255
          description: |-
            Defines which Package the resource is part of.

            MUST be a valid reference to a [Package](#package) ORD ID.

            Every resource MUST be part of one package.
          example: sap.xref:package:SomePackage:v1
        partOfConsumptionBundles:
          type: array
          description: >-
            List of references to the consumption bundles in this resource belongs to.


            MUST be a valid reference to a [Consumption Bundle](#consumption-bundle) ORD ID.


            An API resource SHOULD be associated to one or multiple consumption bundles, if it is of direction `inbound`
            or `mixed`.

            Some ORD consumer use cases MAY depend on an association to a consumption bundle.

            If none is given, the resource may not appear as it's unknown how it can be consumed.


            If a resource has no direct incoming consumption characteristics:

            - MUST NOT assign consumption bundle to API or Event resources with `direction`: `outbound` (no inbound
            consumption)

            - MUST NOT assign consumption bundle if resource is not accessible directly, but only via intermediaries
            like event brokers or gateways.
              - In this case the intermediary SHOULD describe the consumption bundle instead (potentially also re-describing the resources as well).
          items:
            $ref: '#/components/schemas/ConsumptionBundleReference'
          example:
            - ordId: sap.xref:consumptionBundle:bundleXYZ:v1
        defaultConsumptionBundle:
          type: string
          description: |-
            References the default consumption bundle to use for this resource.

            MUST be a valid reference to a [Consumption Bundle](#consumption-bundle) ORD ID.

            Can be used by clients to make a deterministic and preferred choice when multiple options are available.

            The value MUST be an existing option in the corresponding `partOfConsumptionBundles` array.
          pattern: ^([a-z0-9]+(?:[.][a-z0-9]+)*):(consumptionBundle):([a-zA-Z0-9._\-]+):(v0|v[1-9][0-9]*)$
          maxLength: 255
          example: sap.xref:consumptionBundle:bundleXYZ:v1
        partOfProducts:
          type: array
          description: |-
            List of products this resource is a part of.

            MUST be a valid reference to a [Product](#product) ORD ID.

            `partOfProducts` that are assigned to a `Package` are inherited to all of the ORD resources it contains.
          items:
            type: string
            pattern: ^([a-z0-9]+(?:[.][a-z0-9]+)*):(product):([a-zA-Z0-9._\-]+):()$
            maxLength: 255
          minItems: 0
          example:
            - 'sap:product:S4HANA_OD:'
        version:
          type: string
          description: >-
            The complete [SemVer](https://semver.org/) version string.


            It MUST follow the [Semantic Versioning 2.0.0](https://semver.org/) standard.

            It SHOULD be changed if the ORD information or referenced resource definitions changed.

            It SHOULD express minor and patch changes that don't lead to incompatible changes.


            When the `version` major version changes, the [ORD ID](#ord-id) `<majorVersion>` fragment MUST be updated to
            be identical.

            In case that a resource definition file also contains a version number (e.g. [OpenAPI
            `info`.`version`](https://swagger.io/specification/#info-object)), it MUST be equal with the resource
            `version` to avoid inconsistencies.


            The general [Version and Lifecycle](../index.md#version-and-lifecycle) flow MUST be followed.


            Note: A change is only relevant for a version increment, if it affects the ORD resource or ORD taxonomy
            directly.

            For example: If a resource within a `Package` changes, but the package itself did not, the package version
            does not need to be incremented.
          pattern: >-
            ^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$
          example: 1.2.3
        lastUpdate:
          type: string
          format: date-time
          description: >-
            Optional, but RECOMMENDED indicator when (date-time) the last change to the resource (including its
            definitions) happened.


            The date format MUST comply with [RFC 3339, section 5.6](https://tools.ietf.org/html/rfc3339#section-5.6).


            In case that this property is available and the value of it hasn't changed since the last crawling, the
            resource definitions do not need to be fetched and updated.


            Together with `systemInstanceAware`, this property SHOULD be used to optimize the metadata crawling process
            of the ORD aggregators.
          example: '2022-12-19T15:47:04+00:00'
        visibility:
          type: string
          description: |-
            The visibility/exposure of the described resource.
            This indicates who is allowed to see (and implicitly also access) the described resource.
          enum:
            - public
            - internal
            - private
        releaseStatus:
          type: string
          description: The `releaseStatus` specifies the stability of the resource and its external contract.
          enum:
            - active
            - beta
            - deprecated
          example: active
        disabled:
          type: boolean
          default: false
          description: >
            Indicates that this resource is currently not available for consumption at runtime, but could be configured
            to be so.

            This can happen either because it has not been setup for use or disabled by an admin / user.


            If the resource is not available in principle for a particular system instance, e.g. due to lack of
            entitlement, it MUST not be described in the system-instance aware perspective.


            This only needs to reflect the knowledge of the described system instance itself,

            meaning that outside factors don't need to be considered (e.g. network connectivity, middlewares).

            This information may be of relevance for some ORD consumers that need to filter for active or disabled APIs.


            A disabled resource MAY skip describing its resource definitions.
        deprecationDate:
          type: string
          format: date-time
          description: >-
            The deprecation date defines when the resource has been set as deprecated.

            This is not to be confused with the `sunsetDate` which defines when the resource will be actually
            decommissioned / removed.


            If the `releaseStatus` is set to `deprecated`, the `deprecationDate` SHOULD be provided.


            The date format MUST comply with [RFC 3339, section 5.6](https://tools.ietf.org/html/rfc3339#section-5.6).
          example: '2020-12-08T15:47:04+00:00'
        sunsetDate:
          type: string
          format: date-time
          description: |-
            The sunset date defines when the resource is scheduled to be decommissioned/removed.

            If the `releaseStatus` is set to `deprecated`, the `sunsetDate` MUST be provided.

            The date format MUST comply with [RFC 3339, section 5.6](https://tools.ietf.org/html/rfc3339#section-5.6).
          example: '2022-01-08T15:47:04+00:00'
        successors:
          type: array
          description: |-
            The successor resource(s).

            MUST be a valid reference to an ORD ID.

            If the `releaseStatus` is set to `deprecated`, `successors` MUST be provided if one exists.
          items:
            type: string
            pattern: ^([a-z0-9]+(?:[.][a-z0-9]+)*):(eventResource):([a-zA-Z0-9._\-]+):(v0|v[1-9][0-9]*)$
            maxLength: 255
          example:
            - sap.billing.sb:eventResource:BusinessEvents_SubscriptionEvents:v1
        changelogEntries:
          type: array
          description: Contains changelog entries that summarize changes with special regards to version and releaseStatus
          items:
            $ref: '#/components/schemas/ChangelogEntry'
        resourceDefinitions:
          type: array
          description: |-
            List of available machine-readable resource definitions.

            It is RECOMMENDED to provide resource definitions (if applicable) as they enable machine-readable use cases.
            If resource definitions are added or changed, the `version` MUST be incremented.
            An ORD aggregator MAY only (re)fetch the resource definitions again when the `version` was incremented.
          items:
            $ref: '#/components/schemas/EventResourceDefinition'
        implementationStandard:
          type: string
          description: >-
            Declares this EventResource to be a valid implementation of a standardized or shared contract.


            All implementations of the same implementation standard MAY be treated the same by a consumer.

            However, there MAY be differences in the access strategy, and compatible customizations by the implementer.

            The implementation standard MAY define the role of the implementor (producer, consumer, both) and how it is
            determined.


            As of now, only custom implementation standards are supported.
          enum:
            - custom
          example: custom
        customImplementationStandard:
          type: string
          description: >-
            If the fixed `implementationStandard` values need to be extended, an arbitrary
            `customImplementationStandard` can be provided.


            MUST be a valid [Specification ID](../index.md#specification-id).


            MUST only be provided if `implementationStandard` is set to `custom`.
          pattern: ^([a-z0-9]+(?:[.][a-z0-9]+)*):([a-zA-Z0-9._\-]+):v([0-9]+)$
          maxLength: 255
          example: sap.xref:some-event-contract:v1
        customImplementationStandardDescription:
          type: string
          description: >-
            Full description of the custom implementation standard, notated in
            [CommonMark](https://spec.commonmark.org/) (Markdown).


            MUST only be provided if `implementationStandard` is set to `custom`.


            SHOULD contain documentation and links that describe the used standard.
          example: Implemented as defined in [Some Application Documentation](some link).
        responsible:
          type: string
          pattern: ^([a-z0-9]+(?:[.][a-z0-9]+)*):([a-zA-Z0-9._\-\/]+):([a-zA-Z0-9._\-\/]+)$
          maxLength: 255
          description: >-
            Contains typically the organization that is responsible in the sense of RACI matrix for this ORD resource.
            This includes support and feature requests. It is maintained as correlation id to for example support
            components.
          example: sap:ach:CIC-DP-CO
        entityTypeMappings:
          type: array
          description: >-
            Describes mappings between the API Models of the described resource to the underlying, conceptual entity
            types.
          items:
            $ref: '#/components/schemas/EntityTypeMapping'
        eventResourceLinks:
          type: array
          description: |-
            Links with semantic meaning that are specific to event resources.

            If applicable, `eventResourceLinks` MUST be used instead of generic `links`.
          items:
            $ref: '#/components/schemas/APIEventResourceLink'
        links:
          type: array
          description: Generic Links with arbitrary meaning and content.
          items:
            $ref: '#/components/schemas/Link'
        extensible:
          $ref: '#/components/schemas/Extensible'
        countries:
          type: array
          items:
            type: string
            pattern: ^[A-Z]{2}$
          description: >-
            List of countries that the package resources are applicable to.


            MUST be expressed as an array of country codes according to [IES ISO-3166
            ALPHA-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).


            `countries` that are assigned to a `Package` are inherited to all of the ORD resources it contains.
          example:
            - DE
            - US
        lineOfBusiness:
          type: array
          items:
            type: string
            pattern: ^[a-zA-Z0-9-_.\/& ]*$
            minLength: 1
            anyOf:
              - type: string
              - enum:
                  - Asset Management
              - enum:
                  - Commerce
              - enum:
                  - Finance
              - enum:
                  - Human Resources
              - enum:
                  - Manufacturing
              - enum:
                  - Marketing
              - enum:
                  - R&D Engineering
              - enum:
                  - Sales
              - enum:
                  - Service
              - enum:
                  - Sourcing and Procurement
              - enum:
                  - Supply Chain
              - enum:
                  - Sustainability
              - enum:
                  - Metering
              - enum:
                  - Grid Operations and Maintenance
              - enum:
                  - Plant Operations and Maintenance
              - enum:
                  - Maintenance and Engineering
          description: |-
            List of line of business tags.
            No special characters are allowed except `-`, `_`, `.`, `/` and ` `.

            `lineOfBusiness` that are assigned to a `Package` are inherited to all of the ORD resources it contains.
          example:
            - Sales
        industry:
          type: array
          items:
            type: string
            pattern: ^[a-zA-Z0-9-_.\/& ]*$
            minLength: 1
            anyOf:
              - type: string
              - enum:
                  - Aerospace and Defense
              - enum:
                  - Automotive
              - enum:
                  - Banking
              - enum:
                  - Chemicals
              - enum:
                  - Consumer Products
              - enum:
                  - Defense and Security
              - enum:
                  - Engineering Construction and Operations
              - enum:
                  - Healthcare
              - enum:
                  - Higher Education and Research
              - enum:
                  - High Tech
              - enum:
                  - Industrial Machinery and Components
              - enum:
                  - Insurance
              - enum:
                  - Life Sciences
              - enum:
                  - Media
              - enum:
                  - Mill Products
              - enum:
                  - Mining
              - enum:
                  - Oil and Gas
              - enum:
                  - Professional Services
              - enum:
                  - Public Sector
              - enum:
                  - Retail
              - enum:
                  - Sports and Entertainment
              - enum:
                  - Telecommunications
              - enum:
                  - Travel and Transportation
              - enum:
                  - Utilities
              - enum:
                  - Wholesale Distribution
          description: |-
            List of industry tags.
            No special characters are allowed except `-`, `_`, `.`, `/` and ` `.

            `industry` that are assigned to a `Package` are inherited to all of the ORD resources it contains.
          example:
            - Automotive
        tags:
          type: array
          items:
            type: string
            pattern: ^[a-zA-Z0-9-_.\/ ]*$
            minLength: 1
          description: |-
            List of free text style tags.
            No special characters are allowed except `-`, `_`, `.`, `/` and ` `.

            Tags that are assigned to a `Package` are inherited to all of the ORD resources it contains.
          example:
            - storage
            - high-availability
        labels:
          $ref: '#/components/schemas/Labels'
        documentationLabels:
          $ref: '#/components/schemas/DocumentationLabels'
        policyLevel:
          type: string
          description: >
            The [policy level](../../spec-extensions/access-strategies/) (aka. compliance level) that this ORD Document
            or part of it needs to be compliant with.

            Depending on the chosen policy level, certain expectations and validations rules will be applied.


            The policy level can be defined on ORD Document level, but also be overwritten on an individual package or
            resource level.


            If not provided, no additional policy level expectations and validations apply.
          enum:
            - none
            - sap:core:v1
            - custom
          example: sap:core:v1
        customPolicyLevel:
          type: string
          description: >-
            If the fixed `policyLevel` values need to be extended, an arbitrary `customPolicyLevel` can be provided.


            The policy level is inherited from packages to resources they contain, but can be overwritten at resource
            level.


            MUST only be provided if `policyLevel` is set to `custom`.


            MUST be a valid [Specification ID](../index.md#specification-id).
          pattern: ^([a-z0-9]+(?:[.][a-z0-9]+)*):([a-zA-Z0-9._\-]+):(v0|v[1-9][0-9]*)$
          maxLength: 255
          example: sap.xref:customPolicy:v1
        systemInstanceAware:
          type: boolean
          description: >-
            Defines whether this ORD resource is **system instance aware**.

            This is the case (and relevant) when the referenced resource definitions are potentially different between
            **system instances**.


            If this behavior applies, `systemInstanceAware` MUST be set to true.

            An ORD aggregator that represents a system instance aware perspective MUST fetch the referenced resource
            definitions,

            not just once per system type, but once per **system instance**.
          default: false
          example: true
      required:
        - ordId
        - title
        - shortDescription
        - description
        - version
        - visibility
        - partOfPackage
        - releaseStatus
    EntityType:
      type: object
      title: Entity Type
      description: >-
        An entity type ideally describes an underlying conceptual model that is then exposed through one or multiple API
        and events resources.

        It is a well-defined named abstract concept in SAP software representing a data model and behavioral model of a
        concrete business or technical entity.


        The most known example for entity types are the [SAP Object Types
        (SOTs)](https://ui.gtnc.sap.corp/webapp/index.html#/SAPObjectTypes//OneColumn//TilePress) of VDM and the [ODM
        Entities](https://ui.gtnc.sap.corp/webapp/index.html#/ODMEntities//OneColumn//TilePress).
      properties:
        ordId:
          type: string
          description: |-
            The [ORD ID](../index.md#ord-id) is a stable, globally unique ID for ORD resources or taxonomy.

            It MUST be a valid [ORD ID](../index.md#ord-id) of the appropriate ORD type.
          pattern: ^([a-z0-9]+(?:[.][a-z0-9]+)*):(entityType):([a-zA-Z0-9._\-]+):(v0|v[1-9][0-9]*)$
          maxLength: 255
          example: sap.odm:entityType:BusinessPartner:v1
        localId:
          type: string
          description: Local ID, as known by the described system.
          maxLength: 255
          example: BusinessPartner
        correlationIds:
          type: array
          description: >-
            Correlation IDs can be used to create a reference to related data in other repositories (especially to the
            system of record).


            MUST be a valid [Correlation ID](../index.md#correlation-id).
          items:
            type: string
            pattern: ^([a-z0-9]+(?:[.][a-z0-9]+)*):([a-zA-Z0-9._\-\/]+):([a-zA-Z0-9._\-\/]+)$
            maxLength: 255
          example:
            - sap.s4:sot:BusinessPartner
        title:
          type: string
          description: |-
            Human-readable title.

            MUST NOT exceed 255 chars.
            MUST NOT contain line breaks.
          minLength: 1
          maxLength: 255
          example: Business Partner
        shortDescription:
          type: string
          description: |-
            Plain text short description.

            MUST NOT exceed 255 chars.
            MUST NOT contain line breaks.
          minLength: 1
          maxLength: 255
          example: >-
            A business partner is a person, an organization, or a group of persons or organizations in which a company
            has a business interest.
        description:
          type: string
          minLength: 1
          description: Full description, notated in [CommonMark](https://spec.commonmark.org/) (Markdown).
          example: >
            A business partner is a person, an organization, or a group of persons or organizations in which a company
            has a business interest.
        partOfPackage:
          type: string
          pattern: ^([a-z0-9]+(?:[.][a-z0-9]+)*):(package):([a-zA-Z0-9._\-]+):(v0|v[1-9][0-9]*)$
          maxLength: 255
          description: |-
            Defines which Package the resource is part of.

            MUST be a valid reference to a [Package](#package) ORD ID.

            Every resource MUST be part of one package.
          example: sap.xref:package:SomePackage:v1
        partOfProducts:
          type: array
          description: |-
            List of products this resource is a part of.

            MUST be a valid reference to a [Product](#product) ORD ID.

            `partOfProducts` that are assigned to a `Package` are inherited to all of the ORD resources it contains.
          items:
            type: string
            pattern: ^([a-z0-9]+(?:[.][a-z0-9]+)*):(product):([a-zA-Z0-9._\-]+):()$
            maxLength: 255
          minItems: 0
          example:
            - 'sap:product:S4HANA_OD:'
        version:
          type: string
          description: >-
            The complete [SemVer](https://semver.org/) version string.


            It MUST follow the [Semantic Versioning 2.0.0](https://semver.org/) standard.

            It SHOULD be changed if the ORD information or referenced resource definitions changed.

            It SHOULD express minor and patch changes that don't lead to incompatible changes.


            When the `version` major version changes, the [ORD ID](#ord-id) `<majorVersion>` fragment MUST be updated to
            be identical.

            In case that a resource definition file also contains a version number (e.g. [OpenAPI
            `info`.`version`](https://swagger.io/specification/#info-object)), it MUST be equal with the resource
            `version` to avoid inconsistencies.


            The general [Version and Lifecycle](../index.md#version-and-lifecycle) flow MUST be followed.


            Note: A change is only relevant for a version increment, if it affects the ORD resource or ORD taxonomy
            directly.

            For example: If a resource within a `Package` changes, but the package itself did not, the package version
            does not need to be incremented.
          pattern: >-
            ^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$
          example: 1.2.3
        lastUpdate:
          type: string
          format: date-time
          description: >-
            Optional, but RECOMMENDED indicator when (date-time) the last change to the resource (including its
            definitions) happened.


            The date format MUST comply with [RFC 3339, section 5.6](https://tools.ietf.org/html/rfc3339#section-5.6).


            In case that this property is available and the value of it hasn't changed since the last crawling, the
            resource definitions do not need to be fetched and updated.


            Together with `systemInstanceAware`, this property SHOULD be used to optimize the metadata crawling process
            of the ORD aggregators.
          example: '2022-12-19T15:47:04+00:00'
        visibility:
          type: string
          description: |-
            The visibility/exposure of the described resource.
            This indicates who is allowed to see (and implicitly also access) the described resource.
          enum:
            - public
            - internal
            - private
        releaseStatus:
          type: string
          description: The `releaseStatus` specifies the stability of the resource and its external contract.
          enum:
            - active
            - beta
            - deprecated
          example: active
        deprecationDate:
          type: string
          format: date-time
          description: >-
            The deprecation date defines when the resource has been set as deprecated.

            This is not to be confused with the `sunsetDate` which defines when the resource will be actually
            decommissioned / removed.


            If the `releaseStatus` is set to `deprecated`, the `deprecationDate` SHOULD be provided.


            The date format MUST comply with [RFC 3339, section 5.6](https://tools.ietf.org/html/rfc3339#section-5.6).
          example: '2020-12-08T15:47:04+00:00'
        sunsetDate:
          type: string
          format: date-time
          description: |-
            The sunset date defines when the resource is scheduled to be decommissioned/removed.

            If the `releaseStatus` is set to `deprecated`, the `sunsetDate` MUST be provided.

            The date format MUST comply with [RFC 3339, section 5.6](https://tools.ietf.org/html/rfc3339#section-5.6).
          example: '2022-01-08T15:47:04+00:00'
        successors:
          type: array
          description: |-
            The successor resource(s).

            MUST be a valid reference to an ORD ID.

            If the `releaseStatus` is set to `deprecated`, `successors` MUST be provided if one exists.
          items:
            type: string
            pattern: ^([a-z0-9]+(?:[.][a-z0-9]+)*):(entityType):([a-zA-Z0-9._\-]+):(v0|v[1-9][0-9]*)$
            maxLength: 255
          example:
            - sap.odm:entityType:BusinessPartner:v2
        changelogEntries:
          type: array
          description: Contains changelog entries that summarize changes with special regards to version and releaseStatus
          items:
            $ref: '#/components/schemas/ChangelogEntry'
        level:
          type: string
          description: >-
            Defining the abstraction level of the entity type using the DDD terminology.


            In Domain-Driven Design, there is a concept of entities and aggregates. There are root entities which may
            contain

            further sub entities by composition. The complete “package” is then called an aggregate, which gets its name
            and identity

            from the root entity.  An aggregate is a cluster of domain objects that can be treated as a single unit. 
            The root

            is the entity that is referenced from outside the aggregate. There must be only one root per aggregate. The
            root

            ensures the integrity of the aggregate. A sub entity is any other non-root entity in the aggregate. Source,
            see

            [Martin Fowler on DDD Aggregate](https://martinfowler.com/bliki/DDD_Aggregate.html)


            For now, we decided to only cover the aggregate level, which is described in the enum value.
          enum:
            - aggregate
          example: aggregate
        links:
          type: array
          description: Generic Links with arbitrary meaning and content.
          items:
            $ref: '#/components/schemas/Link'
        extensible:
          $ref: '#/components/schemas/Extensible'
        tags:
          type: array
          items:
            type: string
            pattern: ^[a-zA-Z0-9-_.\/ ]*$
            minLength: 1
          description: |-
            List of free text style tags.
            No special characters are allowed except `-`, `_`, `.`, `/` and ` `.

            Tags that are assigned to a `Package` are inherited to all of the ORD resources it contains.
          example:
            - storage
            - high-availability
        labels:
          $ref: '#/components/schemas/Labels'
        documentationLabels:
          $ref: '#/components/schemas/DocumentationLabels'
        policyLevel:
          type: string
          description: >
            The [policy level](../../spec-extensions/access-strategies/) (aka. compliance level) that this ORD Document
            or part of it needs to be compliant with.

            Depending on the chosen policy level, certain expectations and validations rules will be applied.


            The policy level can be defined on ORD Document level, but also be overwritten on an individual package or
            resource level.


            If not provided, no additional policy level expectations and validations apply.
          enum:
            - none
            - sap:core:v1
            - custom
          example: sap:core:v1
        customPolicyLevel:
          type: string
          description: >-
            If the fixed `policyLevel` values need to be extended, an arbitrary `customPolicyLevel` can be provided.


            The policy level is inherited from packages to resources they contain, but can be overwritten at resource
            level.


            MUST only be provided if `policyLevel` is set to `custom`.


            MUST be a valid [Specification ID](../index.md#specification-id).
          pattern: ^([a-z0-9]+(?:[.][a-z0-9]+)*):([a-zA-Z0-9._\-]+):(v0|v[1-9][0-9]*)$
          maxLength: 255
          example: sap.xref:customPolicy:v1
        systemInstanceAware:
          type: boolean
          description: >-
            Defines whether this ORD resource is **system instance aware**.

            This is the case (and relevant) when the referenced resource definitions are potentially different between
            **system instances**.


            If this behavior applies, `systemInstanceAware` MUST be set to true.

            An ORD aggregator that represents a system instance aware perspective MUST fetch the referenced resource
            definitions,

            not just once per system type, but once per **system instance**.
          default: false
          example: true
      required:
        - ordId
        - localId
        - level
        - title
        - version
        - visibility
        - partOfPackage
        - releaseStatus
    DataProduct:
      type: object
      title: Data Product
      description: >-
        A [Data Product](../../details/articles/data-product) is a data set exposed for consumption outside the
        boundaries of the producing application via APIs and described by high quality metadata that can be accessed
        through the [ORD Aggregator](../../spec-v1/#ord-aggregator).


        Please note that this concept is in beta. What this implies is described in [Data Product - Beta
        Status](../../details/articles/data-product#beta-status).
      properties:
        ordId:
          type: string
          description: |-
            The [ORD ID](../index.md#ord-id) is a stable, globally unique ID for ORD resources or taxonomy.

            It MUST be a valid [ORD ID](../index.md#ord-id) of the appropriate ORD type.
          pattern: ^([a-z0-9]+(?:[.][a-z0-9]+)*):(dataProduct):([a-zA-Z0-9._\-]+):(v0|v[1-9][0-9]*)$
          maxLength: 255
          example: sap.foo.bar:dataProduct:CustomerOrder:v1
        localId:
          type: string
          description: Local ID, as known by the described system.
          maxLength: 255
          example: CustomerOrder
        correlationIds:
          type: array
          description: >-
            Correlation IDs can be used to create a reference to related data in other repositories (especially to the
            system of record).


            MUST be a valid [Correlation ID](../index.md#correlation-id).
          items:
            type: string
            pattern: ^([a-z0-9]+(?:[.][a-z0-9]+)*):([a-zA-Z0-9._\-\/]+):([a-zA-Z0-9._\-\/]+)$
            maxLength: 255
          example:
            - sap.s4:communicationScenario:SAP_COM_0008
        title:
          type: string
          description: |-
            Human-readable title.

            MUST NOT exceed 255 chars.
            MUST NOT contain line breaks.
          minLength: 1
          maxLength: 255
          example: Customer Order
        shortDescription:
          type: string
          description: |-
            Plain text short description.

            MUST NOT exceed 255 chars.
            MUST NOT contain line breaks.
          minLength: 1
          maxLength: 255
          example: Offering access to all online and offline orders submitted by customers
        description:
          type: string
          minLength: 1
          description: Full description, notated in [CommonMark](https://spec.commonmark.org/) (Markdown).
          example: >-
            The data product Customer Order offers access to all online and offline orders submitted by customers. It
            provides a customer view on the orders. For fulfillment-specific aspects please refer to the data product
            Fulfillment Order.
        partOfPackage:
          type: string
          pattern: ^([a-z0-9]+(?:[.][a-z0-9]+)*):(package):([a-zA-Z0-9._\-]+):(v0|v[1-9][0-9]*)$
          maxLength: 255
          description: |-
            Defines which Package the resource is part of.

            MUST be a valid reference to a [Package](#package) ORD ID.

            Every resource MUST be part of one package.
          example: sap.xref:package:SomePackage:v1
        version:
          type: string
          description: >-
            The complete [SemVer](https://semver.org/) version string.


            It MUST follow the [Semantic Versioning 2.0.0](https://semver.org/) standard.

            It SHOULD be changed if the ORD information or referenced resource definitions changed.

            It SHOULD express minor and patch changes that don't lead to incompatible changes.


            When the `version` major version changes, the [ORD ID](#ord-id) `<majorVersion>` fragment MUST be updated to
            be identical.

            In case that a resource definition file also contains a version number (e.g. [OpenAPI
            `info`.`version`](https://swagger.io/specification/#info-object)), it MUST be equal with the resource
            `version` to avoid inconsistencies.


            The general [Version and Lifecycle](../index.md#version-and-lifecycle) flow MUST be followed.


            Note: A change is only relevant for a version increment, if it affects the ORD resource or ORD taxonomy
            directly.

            For example: If a resource within a `Package` changes, but the package itself did not, the package version
            does not need to be incremented.
          pattern: >-
            ^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$
          example: 1.2.3
        lastUpdate:
          type: string
          format: date-time
          description: >-
            Optional, but RECOMMENDED indicator when (date-time) the last change to the resource (including its
            definitions) happened.


            The date format MUST comply with [RFC 3339, section 5.6](https://tools.ietf.org/html/rfc3339#section-5.6).


            In case that this property is available and the value of it hasn't changed since the last crawling, the
            resource definitions do not need to be fetched and updated.


            Together with `systemInstanceAware`, this property SHOULD be used to optimize the metadata crawling process
            of the ORD aggregators.
          example: '2022-12-19T15:47:04+00:00'
        visibility:
          type: string
          description: >-
            The visibility/exposure of the data product. A public data product might have private APIs for trusted
            consumers therefore the having the property on data product
          enum:
            - public
            - internal
            - private
        releaseStatus:
          type: string
          description: |-
            The `releaseStatus` specifies the stability towards incompatible changes in the future.
            In the context of data products, it it covers only properties on the data product level.
            APIs that are part of the input and output ports have their own independent `releaseStatus` and `version`.
          enum:
            - active
            - beta
            - deprecated
          example: active
        disabled:
          type: boolean
          default: false
          description: >
            Indicates that this resource is currently not available for consumption at runtime, but could be configured
            to be so.

            This can happen either because it has not been setup for use or disabled by an admin / user.


            If the resource is not available in principle for a particular system instance, e.g. due to lack of
            entitlement, it MUST not be described in the system-instance aware perspective.


            This only needs to reflect the knowledge of the described system instance itself,

            meaning that outside factors don't need to be considered (e.g. network connectivity, middlewares).

            This information may be of relevance for some ORD consumers that need to filter for active or disabled APIs.


            A disabled resource MAY skip describing its resource definitions.
        deprecationDate:
          type: string
          format: date-time
          description: >-
            The deprecation date defines when the resource has been set as deprecated.

            This is not to be confused with the `sunsetDate` which defines when the resource will be actually
            decommissioned / removed.


            If the `releaseStatus` is set to `deprecated`, the `deprecationDate` SHOULD be provided.


            The date format MUST comply with [RFC 3339, section 5.6](https://tools.ietf.org/html/rfc3339#section-5.6).
          example: '2020-12-08T15:47:04+00:00'
        sunsetDate:
          type: string
          format: date-time
          description: |-
            The sunset date defines when the resource is scheduled to be decommissioned/removed.

            If the `releaseStatus` is set to `deprecated`, the `sunsetDate` MUST be provided.

            The date format MUST comply with [RFC 3339, section 5.6](https://tools.ietf.org/html/rfc3339#section-5.6).
          example: '2022-01-08T15:47:04+00:00'
        successors:
          type: array
          description: |-
            The successor resource(s).

            MUST be a valid reference to an ORD ID.

            If the `releaseStatus` is set to `deprecated`, `successors` MUST be provided if one exists.
          items:
            type: string
            pattern: ^([a-z0-9]+(?:[.][a-z0-9]+)*):(dataProduct):([a-zA-Z0-9._\-]+):(v0|v[1-9][0-9]*)$
            maxLength: 255
          example:
            - sap.foo.bar:dataProduct:CustomerOrder:v1
        changelogEntries:
          type: array
          description: Contains changelog entries that summarize changes with special regards to version and releaseStatus
          items:
            $ref: '#/components/schemas/ChangelogEntry'
        type:
          description: Type of the data product. Based on the type some properties of a data product may become optional/mandatory.
          type: string
          enum:
            - base
            - derived
          example: base
        category:
          description: >-
            Category of the data-set within data product. Based on its definition, a data product is a “data set” -
            which can include on the values below.

            Based on the type some properties of a data product may become optional/mandatory.

            Consumers might still do analytics on business object like data products.
          type: string
          enum:
            - business-object
            - analytical
            - other
          example: business-object
        entityTypes:
          type: array
          description: List of (ODM) entity types that are at least partially exposed by the data product.
          items:
            type: string
            pattern: ^([a-z0-9]+(?:[.][a-z0-9]+)*):(entityType):([a-zA-Z0-9._\-]+):(v0|v[1-9][0-9]*)$
            maxLength: 255
          example:
            - sap.odm:entityType:CustomerOrder:v1
            - sap.odm:entityType:BusinessPartner:v1
        inputPorts:
          type: array
          description: >-
            List of Integration Dependencies, whose aspects will form the actual input ports. Therefore, the integration
            dependencies are an indirection to make use of a more general concern.

            Input ports are the public interface to ingest data into the data product.

            `derived` typed data products consume data through the input ports. Different input ports allowing ingestion
            of different sub-sets building up the data-set for the data product.

            `base` typed data products might not have any input ports. Their data sets are typically served directly
            from the application.
          minItems: 0
          items:
            $ref: '#/components/schemas/IntegrationDependency'
        outputPorts:
          type: array
          description: >-
            List of output ports.

            Output ports are the public interface to access the data set of the data product. Output ports of the same
            data product might produce different facets of the data set with different qualities.

            Different output ports providing access to different sub-sets of the complete data products data-set. As
            long as different output ports are accessing the same model beneath, they should belong to the same data
            product.

            If multiple output ports structure is too different, splitting and distributing them to different data
            product is suggested.
          minItems: 1
          items:
            $ref: '#/components/schemas/DataProductOutputPort'
        responsible:
          type: string
          pattern: ^([a-z0-9]+(?:[.][a-z0-9]+)*):([a-zA-Z0-9._\-\/]+):([a-zA-Z0-9._\-\/]+)$
          maxLength: 255
          description: >-
            Contains typically the organization that is responsible in the sense of RACI matrix for this ORD resource.
            This includes support and feature requests. It is maintained as correlation id to for example support
            components.
          example: sap:ach:CIC-DP-CO
        dataProductLinks:
          type: array
          description: Links with semantic meaning that are specific to Data Product Resources.
          items:
            $ref: '#/components/schemas/DataProductLink'
        links:
          type: array
          description: Generic Links with arbitrary meaning and content.
          items:
            $ref: '#/components/schemas/Link'
        industry:
          type: array
          items:
            type: string
            pattern: ^[a-zA-Z0-9-_.\/& ]*$
            minLength: 1
            anyOf:
              - type: string
              - enum:
                  - Aerospace and Defense
              - enum:
                  - Automotive
              - enum:
                  - Banking
              - enum:
                  - Chemicals
              - enum:
                  - Consumer Products
              - enum:
                  - Defense and Security
              - enum:
                  - Engineering Construction and Operations
              - enum:
                  - Healthcare
              - enum:
                  - Higher Education and Research
              - enum:
                  - High Tech
              - enum:
                  - Industrial Machinery and Components
              - enum:
                  - Insurance
              - enum:
                  - Life Sciences
              - enum:
                  - Media
              - enum:
                  - Mill Products
              - enum:
                  - Mining
              - enum:
                  - Oil and Gas
              - enum:
                  - Professional Services
              - enum:
                  - Public Sector
              - enum:
                  - Retail
              - enum:
                  - Sports and Entertainment
              - enum:
                  - Telecommunications
              - enum:
                  - Travel and Transportation
              - enum:
                  - Utilities
              - enum:
                  - Wholesale Distribution
          description: |-
            List of industry tags.
            No special characters are allowed except `-`, `_`, `.`, `/` and ` `.

            `industry` that are assigned to a `Package` are inherited to all of the ORD resources it contains.
          example:
            - Automotive
        lineOfBusiness:
          type: array
          items:
            type: string
            pattern: ^[a-zA-Z0-9-_.\/& ]*$
            minLength: 1
            anyOf:
              - type: string
              - enum:
                  - Asset Management
              - enum:
                  - Commerce
              - enum:
                  - Finance
              - enum:
                  - Human Resources
              - enum:
                  - Manufacturing
              - enum:
                  - Marketing
              - enum:
                  - R&D Engineering
              - enum:
                  - Sales
              - enum:
                  - Service
              - enum:
                  - Sourcing and Procurement
              - enum:
                  - Supply Chain
              - enum:
                  - Sustainability
              - enum:
                  - Metering
              - enum:
                  - Grid Operations and Maintenance
              - enum:
                  - Plant Operations and Maintenance
              - enum:
                  - Maintenance and Engineering
          description: |-
            List of line of business tags.
            No special characters are allowed except `-`, `_`, `.`, `/` and ` `.

            `lineOfBusiness` that are assigned to a `Package` are inherited to all of the ORD resources it contains.
          example:
            - Sales
        tags:
          type: array
          items:
            type: string
            pattern: ^[a-zA-Z0-9-_.\/ ]*$
            minLength: 1
          description: |-
            List of free text style tags.
            No special characters are allowed except `-`, `_`, `.`, `/` and ` `.

            Tags that are assigned to a `Package` are inherited to all of the ORD resources it contains.
          example:
            - storage
            - high-availability
        labels:
          $ref: '#/components/schemas/Labels'
        documentationLabels:
          $ref: '#/components/schemas/DocumentationLabels'
        policyLevel:
          type: string
          description: >
            The [policy level](../../spec-extensions/access-strategies/) (aka. compliance level) that this ORD Document
            or part of it needs to be compliant with.

            Depending on the chosen policy level, certain expectations and validations rules will be applied.


            The policy level can be defined on ORD Document level, but also be overwritten on an individual package or
            resource level.


            If not provided, no additional policy level expectations and validations apply.
          enum:
            - none
            - sap:core:v1
            - custom
          example: sap:core:v1
        customPolicyLevel:
          type: string
          description: >-
            If the fixed `policyLevel` values need to be extended, an arbitrary `customPolicyLevel` can be provided.


            The policy level is inherited from packages to resources they contain, but can be overwritten at resource
            level.


            MUST only be provided if `policyLevel` is set to `custom`.


            MUST be a valid [Specification ID](../index.md#specification-id).
          pattern: ^([a-z0-9]+(?:[.][a-z0-9]+)*):([a-zA-Z0-9._\-]+):(v0|v[1-9][0-9]*)$
          maxLength: 255
          example: sap.xref:customPolicy:v1
        systemInstanceAware:
          type: boolean
          description: >-
            Defines whether this ORD resource is **system instance aware**.

            This is the case (and relevant) when the referenced resource definitions are potentially different between
            **system instances**.


            If this behavior applies, `systemInstanceAware` MUST be set to true.

            An ORD aggregator that represents a system instance aware perspective MUST fetch the referenced resource
            definitions,

            not just once per system type, but once per **system instance**.
          default: false
          example: true
      required:
        - ordId
        - type
        - category
        - title
        - version
        - releaseStatus
        - visibility
        - partOfPackage
        - responsible
        - outputPorts
    DataProductOutputPort:
      type: object
      title: Data Product Output Port
      description: >-
        A data product outport references APIs or Events that expose different sub-sets of the same data-set

        Referenced API or Event ORD resources don't need to be provided within the same ORD document. Especially if a
        data product is built against a specific API contract of another application or data product,

        this API resource should be referred to. In this case the other application is responsible for the lifecycle of
        the API contract and will update its ORD description independently. This is also the main reason for not

        directly referencing API or Event resources, so that a data product can attach limited data product specific
        properties in the future.
      properties:
        ordId:
          type: string
          description: |-
            The [ORD ID](../index.md#ord-id) is a stable, globally unique ID for ORD resources or taxonomy.

            It MUST be a valid [ORD ID](../index.md#ord-id) of the appropriate ORD type.
          pattern: ^([a-z0-9]+(?:[.][a-z0-9]+)*):(apiResource|eventResource):([a-zA-Z0-9._\-]+):(v0|v[1-9][0-9]*)$
          maxLength: 255
          example: sap.cic:apiResource:RetailTransactionOData:v1
      required:
        - ordId
    APIResourceDefinition:
      type: object
      title: API Resource Definition
      description: |-
        Link and categorization of a machine-readable API definition.
        For example, OpenAPI definition, OData Metadata, etc.
      properties:
        type:
          description: |-
            Type of the API Resource Definition
            If "custom" is chosen, a customType MUST be provided
          type: string
          enum:
            - openapi-v2
            - openapi-v3
            - raml-v1
            - edmx
            - csdl-json
            - graphql-sdl
            - wsdl-v1
            - wsdl-v2
            - sap-rfc-metadata-v1
            - sap-sql-api-definition-v1
            - custom
          example: openapi-v3
        customType:
          type: string
          description: |-
            If the fixed `type` enum values need to be extended, an arbitrary `customType` can be provided.

            MUST be a valid [Specification ID](../index.md#specification-id).

            MUST only be provided if `type` is set to `custom`.
          pattern: ^([a-z0-9]+(?:[.][a-z0-9]+)*):([a-zA-Z0-9._\-]+):v([0-9]+)$
          maxLength: 255
          example: sap:custom-definition-format:v1
        mediaType:
          description: >
            The [Media Type](https://www.iana.org/assignments/media-types/media-types.xhtml) of the definition
            serialization format.

            A consuming application can use this information to know which file format parser it needs to use.

            For example, for OpenAPI 3, it's valid to express the same definition in both YAML and JSON.


            If no Media Type is registered for the referenced file,

            `text/plain` MAY be used for arbitrary plain-text and `application/octet-stream` for arbitrary binary data.
          type: string
          enum:
            - application/json
            - application/xml
            - text/yaml
            - text/plain
            - application/octet-stream
          example: application/json
        url:
          type: string
          format: uri-reference
          description: >-
            [URL reference](https://tools.ietf.org/html/rfc3986#section-4.1) (URL or relative reference) to the resource
            definition file.


            It is RECOMMENDED to provide a relative URL (to base URL), starting with `/`.
          example: /api/openApi.yaml
        accessStrategies:
          type: array
          description: >-
            List of supported access strategies for retrieving metadata from the ORD provider.

            An ORD Consumer/ORD Aggregator MAY choose any of the strategies.


            If this property is not provided, the definition URL will be available through the same access strategy as
            this ORD document.

            We RECOMMEND anyway that the attached metadata definitions are available with the same access strategies, to
            simplify the aggregator crawling process.
          items:
            $ref: '#/components/schemas/AccessStrategy'
          minItems: 1
      required:
        - type
        - mediaType
        - url
    EventResourceDefinition:
      type: object
      title: Event Resource Definition
      description: |-
        Link and categorization of a machine-readable API definition.
        For example, AsyncAPI or OpenAPI with callbacks, etc.
      properties:
        type:
          description: Type of the event resource definition
          type: string
          enum:
            - asyncapi-v2
            - custom
          example: asyncapi-v2
        customType:
          type: string
          description: |-
            If the fixed `type` enum values need to be extended, an arbitrary `customType` can be provided.

            MUST be a valid [Specification ID](../index.md#specification-id).

            MUST only be provided if `type` is set to `custom`.
          pattern: ^([a-z0-9]+(?:[.][a-z0-9]+)*):([a-zA-Z0-9._\-]+):v([0-9]+)$
          maxLength: 255
          example: sap:custom-definition-format:v1
        mediaType:
          description: >
            The [Media Type](https://www.iana.org/assignments/media-types/media-types.xhtml) of the definition
            serialization format.

            A consuming application can use this information to know which file format parser it needs to use.

            For example, for OpenAPI 3, it's valid to express the same definition in both YAML and JSON.


            If no Media Type is registered for the referenced file,

            `text/plain` MAY be used for arbitrary plain-text and `application/octet-stream` for arbitrary binary data.
          type: string
          enum:
            - application/json
            - application/xml
            - text/yaml
            - text/plain
            - application/octet-stream
          example: application/json
        url:
          type: string
          format: uri-reference
          description: >-
            [URL reference](https://tools.ietf.org/html/rfc3986#section-4.1) (URL or relative reference) to the resource
            definition file.


            It is RECOMMENDED to provide a relative URL (to base URL), starting with `/`.
          example: /some/url/events/eventCatalog.json
        accessStrategies:
          type: array
          description: >-
            List of supported access strategies for retrieving metadata from the ORD provider.

            An ORD Consumer/ORD Aggregator MAY choose any of the strategies.


            If this property is not provided, the definition URL will be available through the same access strategy as
            this ORD document.

            We RECOMMEND anyway that the attached metadata definitions are available with the same access strategies, to
            simplify the aggregator crawling process.
          items:
            $ref: '#/components/schemas/AccessStrategy'
          minItems: 1
      required:
        - type
        - mediaType
        - url
    Product:
      type: object
      title: Product
      description: >-
        A **product** in ORD is understood as a software product:

        A non-versioned, high-level entity for structuring the software portfolio from a software logistics perspective.

        While **system type** is a technical concept, **product** is the term to use for internal or customer-facing
        communication.


        Please note that the ORD concept of a product is very simple on purpose.

        There are no product versions, product variants, and other more detailed concepts.

        ORD assumes that this is handled by specialized systems and that ORD only provides the means to correlate to
        them.
      properties:
        ordId:
          type: string
          description: |-
            The [ORD ID](../index.md#ord-id) is a stable, globally unique ID for ORD resources or taxonomy.

            It MUST be a valid [ORD ID](../index.md#ord-id) of the appropriate ORD type.
          pattern: ^([a-z0-9]+(?:[.][a-z0-9]+)*):(product):([a-zA-Z0-9._\-]+):()$
          maxLength: 255
          example: 'sap:product:S4HANA_OD:'
        correlationIds:
          type: array
          description: >-
            Correlation IDs can be used to create a reference to related data in other repositories (especially to the
            system of record).


            MUST be a valid [Correlation ID](../index.md#correlation-id).
          items:
            type: string
            pattern: ^([a-z0-9]+(?:[.][a-z0-9]+)*):([a-zA-Z0-9._\-\/]+):([a-zA-Z0-9._\-\/]+)$
            maxLength: 255
          example:
            - sap.xref:product:ABC
        title:
          type: string
          description: |-
            Human-readable title.

            MUST NOT exceed 255 chars.
            MUST NOT contain line breaks.
          minLength: 1
          maxLength: 255
          example: SAP S/4HANA Cloud
        shortDescription:
          type: string
          description: |-
            Plain text short description.

            MUST NOT exceed 255 chars.
            MUST NOT contain line breaks.
          minLength: 1
          maxLength: 255
          example: The next generation digital core designed to help you run simple in a digital economy.
        description:
          type: string
          minLength: 1
          description: Full description, notated in [CommonMark](https://spec.commonmark.org/) (Markdown).
        vendor:
          type: string
          description: |-
            Vendor / organization that is responsible for the Product.

            MUST be a valid reference to a [Vendor](#vendor) ORD ID.
          pattern: ^([a-z0-9]+(?:[.][a-z0-9]+)*):(vendor):([a-zA-Z0-9._\-]+):()$
          maxLength: 256
          example: 'sap:vendor:SAP:'
        parent:
          type: string
          description: |-
            Optional product parent ORD ID, if a hierarchical product structure needs to be expressed.

            MUST be a valid reference to a [Product](#product) ORD ID.
          pattern: ^([a-z0-9]+(?:[.][a-z0-9]+)*):(product):([a-zA-Z0-9._\-]+):()$
          example: 'sap:product:S4HANA_OD:'
        tags:
          type: array
          items:
            type: string
            pattern: ^[a-zA-Z0-9-_.\/ ]*$
            minLength: 1
          description: |-
            List of free text style tags.
            No special characters are allowed except `-`, `_`, `.`, `/` and ` `.

            Tags that are assigned to a `Package` are inherited to all of the ORD resources it contains.
          example:
            - storage
            - high-availability
        labels:
          $ref: '#/components/schemas/Labels'
        documentationLabels:
          $ref: '#/components/schemas/DocumentationLabels'
      required:
        - ordId
        - title
        - shortDescription
        - vendor
    Capability:
      type: object
      title: Capability
      description: >-
        Capabilities can be used to describe use case specific capabilities, most notably supported features or
        additional information (like configuration) that needs to be understood from outside.

        This is a generic ORD concept that aims to cover many different capability discovery use cases that would
        otherwise need be implemented as individual service provider interfaces (SPIs).


        If a capability needs to expose more information than possible with generic capability properties, a custom
        capability definition can be defined and referenced in ORD.

        This is the same idea and mechanism as with API resources and their resource definition formats.
      properties:
        ordId:
          type: string
          description: |-
            The [ORD ID](../index.md#ord-id) is a stable, globally unique ID for ORD resources or taxonomy.

            It MUST be a valid [ORD ID](../index.md#ord-id) of the appropriate ORD type.
          pattern: ^([a-z0-9-]+(?:[.][a-z0-9-]+)*):(capability):([a-zA-Z0-9._\-]+):(v0|v[1-9][0-9]*)$
          maxLength: 255
          example: sap.foo.bar:capability:fieldExtensibility:v1
        localId:
          type: string
          description: Local ID, as known by the described system.
          maxLength: 255
          example: bundleXYZ
        correlationIds:
          type: array
          description: >-
            Correlation IDs can be used to create a reference to related data in other repositories (especially to the
            system of record).


            MUST be a valid [Correlation ID](../index.md#correlation-id).
          items:
            type: string
            pattern: ^([a-z0-9]+(?:[.][a-z0-9]+)*):([a-zA-Z0-9._\-\/]+):([a-zA-Z0-9._\-\/]+)$
            maxLength: 255
          example:
            - sap.s4:communicationScenario:SAP_COM_0008
        type:
          description: Type of the Capability
          type: string
          enum:
            - custom
            - sap.mdo:mdi-capability:v1
          example: custom
        customType:
          type: string
          description: |-
            If the fixed `type` enum values need to be extended, an arbitrary `customType` can be provided.

            MUST be a valid [Specification ID](../index.md#specification-id).

            MUST only be provided if `type` is set to `custom`.
          pattern: ^([a-z0-9]+(?:[.][a-z0-9]+)*):([a-zA-Z0-9._\-]+):v([0-9]+)$
          maxLength: 255
          example: sap:custom-definition-format:v1
        title:
          type: string
          description: |-
            Human-readable title.

            MUST NOT exceed 255 chars.
            MUST NOT contain line breaks.
          minLength: 1
          maxLength: 255
          example: MDI Capability
        shortDescription:
          type: string
          description: |-
            Plain text short description.

            MUST NOT exceed 255 chars.
            MUST NOT contain line breaks.
          minLength: 1
          maxLength: 255
          example: SAP S/4HANA Cloud, our next generation cloud ERP suite designed for in-memory computing.
        description:
          type: string
          minLength: 1
          description: Full description, notated in [CommonMark](https://spec.commonmark.org/) (Markdown).
          example: |
            SAP S/4HANA Cloud, our next generation cloud ERP suite designed for
            in-memory computing, acts as a digital core, connecting your
            enterprise with people, business networks, the Internet of Things,
            Big Data, and more.
        partOfPackage:
          type: string
          pattern: ^([a-z0-9]+(?:[.][a-z0-9]+)*):(package):([a-zA-Z0-9._\-]+):(v0|v[1-9][0-9]*)$
          maxLength: 255
          description: |-
            Defines which Package the resource is part of.

            MUST be a valid reference to a [Package](#package) ORD ID.

            Every resource MUST be part of one package.
          example: sap.xref:package:SomePackage:v1
        version:
          type: string
          description: >-
            The complete [SemVer](https://semver.org/) version string.


            It MUST follow the [Semantic Versioning 2.0.0](https://semver.org/) standard.

            It SHOULD be changed if the ORD information or referenced resource definitions changed.

            It SHOULD express minor and patch changes that don't lead to incompatible changes.


            When the `version` major version changes, the [ORD ID](#ord-id) `<majorVersion>` fragment MUST be updated to
            be identical.

            In case that a resource definition file also contains a version number (e.g. [OpenAPI
            `info`.`version`](https://swagger.io/specification/#info-object)), it MUST be equal with the resource
            `version` to avoid inconsistencies.


            The general [Version and Lifecycle](../index.md#version-and-lifecycle) flow MUST be followed.


            Note: A change is only relevant for a version increment, if it affects the ORD resource or ORD taxonomy
            directly.

            For example: If a resource within a `Package` changes, but the package itself did not, the package version
            does not need to be incremented.
          pattern: >-
            ^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$
          example: 1.2.3
        lastUpdate:
          type: string
          format: date-time
          description: >-
            Optional, but RECOMMENDED indicator when (date-time) the last change to the resource (including its
            definitions) happened.


            The date format MUST comply with [RFC 3339, section 5.6](https://tools.ietf.org/html/rfc3339#section-5.6).


            In case that this property is available and the value of it hasn't changed since the last crawling, the
            resource definitions do not need to be fetched and updated.


            Together with `systemInstanceAware`, this property SHOULD be used to optimize the metadata crawling process
            of the ORD aggregators.
          example: '2022-12-19T15:47:04+00:00'
        visibility:
          type: string
          description: |-
            The visibility/exposure of the described resource.
            This indicates who is allowed to see (and implicitly also access) the described resource.
          enum:
            - public
            - internal
            - private
        releaseStatus:
          type: string
          description: The `releaseStatus` specifies the stability of the resource and its external contract.
          enum:
            - active
            - beta
            - deprecated
          example: active
        relatedEntityTypes:
          type: array
          description: |-
            Optional list of related EntityType Resources.

            MUST be a valid reference to an [EntityType Resource](#entity-type) ORD ID.
          items:
            type: string
            pattern: ^([a-z0-9]+(?:[.][a-z0-9]+)*):(entityType):([a-zA-Z0-9._\-]+):(v0|v[1-9][0-9]*)$
          example:
            - sap.odm:entityType:WorkforcePerson:v1
        definitions:
          type: array
          description: >-
            List of available machine-readable capability definitions.


            If capability definitions are added or changed, the `version` SHOULD be incremented and `lastUpdate` be
            updated.
          items:
            $ref: '#/components/schemas/CapabilityDefinition'
        links:
          type: array
          description: Generic Links with arbitrary meaning and content.
          items:
            $ref: '#/components/schemas/Link'
        tags:
          type: array
          items:
            type: string
            pattern: ^[a-zA-Z0-9-_.\/ ]*$
            minLength: 1
          description: |-
            List of free text style tags.
            No special characters are allowed except `-`, `_`, `.`, `/` and ` `.

            Tags that are assigned to a `Package` are inherited to all of the ORD resources it contains.
          example:
            - storage
            - high-availability
        labels:
          $ref: '#/components/schemas/Labels'
        documentationLabels:
          $ref: '#/components/schemas/DocumentationLabels'
        systemInstanceAware:
          type: boolean
          description: >-
            Defines whether this ORD resource is **system instance aware**.

            This is the case (and relevant) when the referenced resource definitions are potentially different between
            **system instances**.


            If this behavior applies, `systemInstanceAware` MUST be set to true.

            An ORD aggregator that represents a system instance aware perspective MUST fetch the referenced resource
            definitions,

            not just once per system type, but once per **system instance**.
          default: false
          example: true
      required:
        - ordId
        - type
        - title
        - version
        - releaseStatus
        - visibility
        - partOfPackage
    CapabilityDefinition:
      type: object
      title: Capability Definition
      description: Link and categorization of a machine-readable capability definition.
      properties:
        type:
          description: Type of the capability resource definition
          type: string
          enum:
            - custom
            - sap.mdo:mdi-capability-definition:v1
          example: custom
        customType:
          type: string
          description: |-
            If the fixed `type` enum values need to be extended, an arbitrary `customType` can be provided.

            MUST be a valid [Specification ID](../index.md#specification-id).

            MUST only be provided if `type` is set to `custom`.
          pattern: ^([a-z0-9]+(?:[.][a-z0-9]+)*):([a-zA-Z0-9._\-]+):v([0-9]+)$
          maxLength: 255
          example: sap:custom-definition-format:v1
        mediaType:
          description: >
            The [Media Type](https://www.iana.org/assignments/media-types/media-types.xhtml) of the definition
            serialization format.

            A consuming application can use this information to know which file format parser it needs to use.

            For example, for OpenAPI 3, it's valid to express the same definition in both YAML and JSON.


            If no Media Type is registered for the referenced file,

            `text/plain` MAY be used for arbitrary plain-text and `application/octet-stream` for arbitrary binary data.
          type: string
          enum:
            - application/json
            - application/xml
            - text/yaml
            - text/plain
            - application/octet-stream
          example: application/json
        url:
          type: string
          format: uri-reference
          description: >-
            [URL reference](https://tools.ietf.org/html/rfc3986#section-4.1) (URL or relative reference) to the resource
            definition file.


            It is RECOMMENDED to provide a relative URL (to base URL), starting with `/`.
          example: /capabilities/someCapability/someDocument.json
        accessStrategies:
          type: array
          description: >-
            List of supported access strategies for retrieving metadata from the ORD provider.

            An ORD Consumer/ORD Aggregator MAY choose any of the strategies.


            If this property is not provided, the definition URL will be available through the same access strategy as
            this ORD document.

            We RECOMMEND anyway that the attached metadata definitions are available with the same access strategies, to
            simplify the aggregator crawling process.
          items:
            $ref: '#/components/schemas/AccessStrategy'
          minItems: 1
      required:
        - type
        - mediaType
        - url
    IntegrationDependency:
      type: object
      title: Integration Dependency
      description: >-
        An [Integration Dependency](../../details/articles/integration-dependency) states that the described system
        (self) can integrate with external systems (integration target) to achieve an integration purpose.

        The purpose could be to enable a certain feature or integration scenario, but it could also be a mandatory
        prerequisite for the described system to work.


        The integration dependency includes a list of individual **aspects** that the integration consists of.

        Aspects are an "ingredient" for the integration scenario (and are logically combined with AND condition).

        Each aspect can express alternatives (OR condition) on what API and event resources can be used to achieve the
        same outcome.


        The direction of connection establishment, data flow is not directly implied and needs to be inferred from the
        referenced resources.


        It is not in scope for the Integration Dependency to describe scenarios that external consumers have with the
        own exposed resources.

        This would overstep the boundary of self-description.


        If an integration scenario consists of two sides integration with each other, each need to describe its own part
        in it as an Integration Dependency.

        Therefore, if an integration with multiple types of systems need to be setup, this SHOULD be separated into
        distinct Integration Dependencies.


        An integration dependency is also not meant to describe a bigger process.

        Instead it focuses on the technical necessaries to create an integration for one particular purpose.


        For more details, see [Integration Dependency](../../details/articles/integration-dependency).
      properties:
        ordId:
          type: string
          description: |-
            The [ORD ID](../index.md#ord-id) is a stable, globally unique ID for ORD resources or taxonomy.

            It MUST be a valid [ORD ID](../index.md#ord-id) of the appropriate ORD type.
          pattern: ^([a-z0-9-]+(?:[.][a-z0-9-]+)*):(integrationDependency):([a-zA-Z0-9._\-]+):(v0|v[1-9][0-9]*)$
          maxLength: 255
          example: sap.foo.bar:integrationDependency:CustomerOrder:v1
        localId:
          type: string
          description: Local ID, as known by the described system.
          maxLength: 255
          example: bundleXYZ
        correlationIds:
          type: array
          description: >-
            Correlation IDs can be used to create a reference to related data in other repositories (especially to the
            system of record).


            MUST be a valid [Correlation ID](../index.md#correlation-id).
          items:
            type: string
            pattern: ^([a-z0-9]+(?:[.][a-z0-9]+)*):([a-zA-Z0-9._\-\/]+):([a-zA-Z0-9._\-\/]+)$
            maxLength: 255
          example:
            - sap.s4:communicationScenario:SAP_COM_0008
        title:
          type: string
          description: |-
            Human-readable title.

            MUST NOT exceed 255 chars.
            MUST NOT contain line breaks.
          minLength: 1
          maxLength: 255
          example: Integration Dependency to realize Customer Order data product
        shortDescription:
          type: string
          description: |-
            Plain text short description.

            MUST NOT exceed 255 chars.
            MUST NOT contain line breaks.
          minLength: 1
          maxLength: 255
          example: SAP S/4HANA Cloud, our next generation cloud ERP suite designed for in-memory computing.
        description:
          type: string
          minLength: 1
          description: Full description, notated in [CommonMark](https://spec.commonmark.org/) (Markdown).
          example: |
            SAP S/4HANA Cloud, our next generation cloud ERP suite designed for
            in-memory computing, acts as a digital core, connecting your
            enterprise with people, business networks, the Internet of Things,
            Big Data, and more.
        partOfPackage:
          type: string
          pattern: ^([a-z0-9]+(?:[.][a-z0-9]+)*):(package):([a-zA-Z0-9._\-]+):(v0|v[1-9][0-9]*)$
          maxLength: 255
          description: |-
            Defines which Package the resource is part of.

            MUST be a valid reference to a [Package](#package) ORD ID.

            Every resource MUST be part of one package.
          example: sap.xref:package:SomePackage:v1
        version:
          type: string
          description: >-
            The complete [SemVer](https://semver.org/) version string.


            It MUST follow the [Semantic Versioning 2.0.0](https://semver.org/) standard.

            It SHOULD be changed if the ORD information or referenced resource definitions changed.

            It SHOULD express minor and patch changes that don't lead to incompatible changes.


            When the `version` major version changes, the [ORD ID](#ord-id) `<majorVersion>` fragment MUST be updated to
            be identical.

            In case that a resource definition file also contains a version number (e.g. [OpenAPI
            `info`.`version`](https://swagger.io/specification/#info-object)), it MUST be equal with the resource
            `version` to avoid inconsistencies.


            The general [Version and Lifecycle](../index.md#version-and-lifecycle) flow MUST be followed.


            Note: A change is only relevant for a version increment, if it affects the ORD resource or ORD taxonomy
            directly.

            For example: If a resource within a `Package` changes, but the package itself did not, the package version
            does not need to be incremented.
          pattern: >-
            ^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$
          example: 1.2.3
        lastUpdate:
          type: string
          format: date-time
          description: >-
            Optional, but RECOMMENDED indicator when (date-time) the last change to the resource (including its
            definitions) happened.


            The date format MUST comply with [RFC 3339, section 5.6](https://tools.ietf.org/html/rfc3339#section-5.6).


            In case that this property is available and the value of it hasn't changed since the last crawling, the
            resource definitions do not need to be fetched and updated.


            Together with `systemInstanceAware`, this property SHOULD be used to optimize the metadata crawling process
            of the ORD aggregators.
          example: '2022-12-19T15:47:04+00:00'
        visibility:
          type: string
          description: |-
            The visibility/exposure of the described resource.
            This indicates who is allowed to see (and implicitly also access) the described resource.
          enum:
            - public
            - internal
            - private
        releaseStatus:
          type: string
          description: The `releaseStatus` specifies the stability of the resource and its external contract.
          enum:
            - active
            - beta
            - deprecated
          example: active
        sunsetDate:
          type: string
          format: date-time
          description: |-
            The sunset date defines when the resource is scheduled to be decommissioned/removed.

            If the `releaseStatus` is set to `deprecated`, the `sunsetDate` MUST be provided.

            The date format MUST comply with [RFC 3339, section 5.6](https://tools.ietf.org/html/rfc3339#section-5.6).
          example: '2022-01-08T15:47:04+00:00'
        successors:
          type: array
          description: |-
            The successor resource(s).

            MUST be a valid reference to an ORD ID.

            If the `releaseStatus` is set to `deprecated`, `successors` MUST be provided if one exists.
          items:
            type: string
            pattern: ^([a-z0-9]+(?:[.][a-z0-9]+)*):(integrationDependency):([a-zA-Z0-9._\-]+):(v0|v[1-9][0-9]*)$
            maxLength: 255
          example:
            - sap.foo.bar:integrationDependency:CustomerOrder:v2
        mandatory:
          type: boolean
          description: If true, the Integration Dependency is mandatory for the described system to function.
        aspects:
          type: array
          description: |-
            List of integration aspects that make up the Integration Dependency.

            Each aspect listed is a dedicated, constituent part (AND condition).
          items:
            $ref: '#/components/schemas/IntegrationAspect'
        relatedIntegrationDependencies:
          type: array
          description: >-
            If an Integration Dependency conceptually belongs or related to another Integration Dependency, this can be
            indicated here.

            One situation would be where two systems each have an Integration Dependency to describe a two-sided
            integration from each side.
          items:
            type: string
            pattern: ^([a-z0-9-]+(?:[.][a-z0-9-]+)*):(integrationDependency):([a-zA-Z0-9._\-]+):(v0|v[1-9][0-9]*)$
          example:
            - sap.foo.bar:integrationDependency:SomethingRelated:v1
        links:
          type: array
          description: Generic Links with arbitrary meaning and content.
          items:
            $ref: '#/components/schemas/Link'
        tags:
          type: array
          items:
            type: string
            pattern: ^[a-zA-Z0-9-_.\/ ]*$
            minLength: 1
          description: |-
            List of free text style tags.
            No special characters are allowed except `-`, `_`, `.`, `/` and ` `.

            Tags that are assigned to a `Package` are inherited to all of the ORD resources it contains.
          example:
            - storage
            - high-availability
        labels:
          $ref: '#/components/schemas/Labels'
        documentationLabels:
          $ref: '#/components/schemas/DocumentationLabels'
      required:
        - ordId
        - title
        - version
        - releaseStatus
        - visibility
        - partOfPackage
        - mandatory
    IntegrationAspect:
      type: object
      title: Aspect
      description: >-
        An (integration) aspect is the constituent part that makes up an Integration Dependency.


        Each aspect can list references to resources, which could be owned and defined by the integration target or by
        the described system itself.

        In case the reference links to own resources, it is implied that they are to be used by the integration target
        to fulfill the Integration Dependency.


        If multiple resources are given within an aspect, they are considered alternatives to each other (OR condition).

        In case an AND condition is needed, multiple aspects need to be added to the Integration Dependency.
      properties:
        title:
          type: string
          description: |-
            Human-readable title.

            MUST NOT exceed 255 chars.
            MUST NOT contain line breaks.
          minLength: 1
          maxLength: 255
          example: Integration Aspect to get Customer Order data
        description:
          type: string
          minLength: 1
          description: Full description, notated in [CommonMark](https://spec.commonmark.org/) (Markdown).
          example: |
            SAP S/4HANA Cloud, our next generation cloud ERP suite designed for
            in-memory computing, acts as a digital core, connecting your
            enterprise with people, business networks, the Internet of Things,
            Big Data, and more.
        mandatory:
          type: boolean
          description: If true, the aspect is mandatory to realize the Integration Dependency it contains.
        supportMultipleProviders:
          type: boolean
          description: |-
            If true, the references resources can be provided by multiple system instances.
            If not, only one integration target is supported.
        apiResources:
          type: array
          description: List of API Resource Dependencies.
          items:
            $ref: '#/components/schemas/ApiResourceIntegrationAspect'
        eventResources:
          type: array
          description: List of Event Resource Dependencies.
          items:
            $ref: '#/components/schemas/EventResourceIntegrationAspect'
      required:
        - title
        - mandatory
    ApiResourceIntegrationAspect:
      type: object
      title: API Resource Integration Aspect
      description: API resource related integration aspect
      properties:
        ordId:
          type: string
          description: |-
            The [ORD ID](../index.md#ord-id) is a stable, globally unique ID for ORD resources or taxonomy.

            It MUST be a valid [ORD ID](../index.md#ord-id) of the appropriate ORD type.
          pattern: ^([a-z0-9]+(?:[.][a-z0-9]+)*):(apiResource):([a-zA-Z0-9._\-]+):(v0|v[1-9][0-9]*)$
          maxLength: 255
          example: sap.s4:apiResource:API_BILL_OF_MATERIAL_SRV:v1
        minVersion:
          type: string
          description: |
            Minimum version of the references resource that the integration requires.
          pattern: >-
            ^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$
          example: 1.2.3
      required:
        - ordId
    EventResourceIntegrationAspect:
      type: object
      title: Event Resource Integration Aspect
      description: Event resource related integration aspect
      properties:
        ordId:
          type: string
          description: |-
            The [ORD ID](../index.md#ord-id) is a stable, globally unique ID for ORD resources or taxonomy.

            It MUST be a valid [ORD ID](../index.md#ord-id) of the appropriate ORD type.
          pattern: ^([a-z0-9]+(?:[.][a-z0-9]+)*):(eventResource):([a-zA-Z0-9._\-]+):(v0|v[1-9][0-9]*)$
          maxLength: 255
          example: sap.billing.sb:eventResource:BusinessEvents_SubscriptionEvents:v1
        minVersion:
          type: string
          description: |
            Minimum version of the references resource that the integration requires.
          pattern: >-
            ^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$
          example: 1.2.3
        subset:
          type: array
          description: List of individual events or messages that are sufficient to achieve the aspect.
          items:
            $ref: '#/components/schemas/EventResourceIntegrationAspectSubset'
      required:
        - ordId
    EventResourceIntegrationAspectSubset:
      type: object
      title: Event Resource Integration Aspect Subset
      description: >-
        Defines that Event Resource Integration Aspect only requires a subset of the referenced contract.


        For events, this could be a list of the events that need to be subscribed in order to make the integration work.

        This information helps to narrow down what is really necessary and can help optimize the integration, e.g. by
        only publishing the events that are really needed.
      properties:
        eventType:
          type: string
          description: >-
            The type ID of the individual event or message.


            This MUST be an ID that is understood by the used protocol and resource definition format.

            E.g. for CloudEvents, the [type](https://github.com/cloudevents/spec/blob/v1.0.2/cloudevents/spec.md#type)
            can be used.
          example: sap.cic.Order.OrderTransferred.v1
      required:
        - eventType
    Vendor:
      type: object
      title: Vendor
      description: >-
        The vendor of a product or a package, usually a corporation or a customer / user.


        The vendor of a `Package` is the owner or creator of the content of the package.

        The vendor of a `Product` is the owner of the product.


        If the resources are created by the customer / user of the described system, `customer:vendor:Customer:` MUST be
        used as vendor.


        Both have already a [vendor namespace](../index.md#vendor-namespace) within their ORD ID.

        The `Vendor` entity is giving more details on the vendor namespace.

        For one vendor namespace there MUST only be exactly one `Vendor` ORD entity describing it.


        For example: The only correct value for a SAP vendor reference is `sap:vendor:SAP:`.
      properties:
        ordId:
          type: string
          description: |-
            The [ORD ID](../index.md#ord-id) is a stable, globally unique ID for ORD resources or taxonomy.

            It MUST be a valid [ORD ID](../index.md#ord-id) of the appropriate ORD type.
          pattern: ^([a-z0-9]+):(vendor):([a-zA-Z0-9._\-]+):()$
          maxLength: 255
          example: 'sap:vendor:SAP:'
        title:
          type: string
          description: |-
            Human-readable title.

            MUST NOT exceed 255 chars.
            MUST NOT contain line breaks.
          minLength: 1
          maxLength: 255
          example: SAP
        partners:
          type: array
          description: |-
            Optional list of partner vendors, referenced through their ORD ID.

            MUST be a valid reference to a [Vendor](#vendor) ORD ID.

            This property can be used to indicate partnership relations between vendors.
          items:
            type: string
            pattern: ^([a-z0-9]+(?:[.][a-z0-9]+)*):(vendor):([a-zA-Z0-9._\-]+):()$
          example:
            - 'microsoft:vendor:Microsoft:'
        tags:
          type: array
          items:
            type: string
            pattern: ^[a-zA-Z0-9-_.\/ ]*$
            minLength: 1
          description: |-
            List of free text style tags.
            No special characters are allowed except `-`, `_`, `.`, `/` and ` `.

            Tags that are assigned to a `Package` are inherited to all of the ORD resources it contains.
          example:
            - storage
            - high-availability
        labels:
          $ref: '#/components/schemas/Labels'
        documentationLabels:
          $ref: '#/components/schemas/DocumentationLabels'
      required:
        - ordId
        - title
    ChangelogEntry:
      type: object
      title: Changelog Entry
      description: |-
        A changelog entry can be used to indicate changes.
        Usually they lead to a change of the version number or the release status.
      properties:
        version:
          type: string
          minLength: 1
          description: |-
            Full version number that corresponds to the `version` that is described by the changelog entry.

            Ideally it follows the [Semantic Versioning 2.0.0](https://semver.org/) standard,
            but since it should reflect the actual version string / scheme used, this is not a mandatory requirement.
          example: 1.2.3
        releaseStatus:
          type: string
          description: The `releaseStatus` specifies the stability of the resource and its external contract.
          enum:
            - active
            - beta
            - deprecated
          example: active
        date:
          type: string
          format: date
          description: |-
            Date of change, without time or timezone information.

            The date format MUST comply with [RFC 3339, section 5.6](https://tools.ietf.org/html/rfc3339#section-5.6).
          example: '2020-04-29'
        description:
          type: string
          minLength: 1
          description: Full description, notated in [CommonMark](https://spec.commonmark.org/) (Markdown).
          example: |-
            ## Changelog
            ...
        url:
          type: string
          format: uri
          description: Optional [URL](https://tools.ietf.org/html/rfc3986) that links to a more detailed changelog entry.
      required:
        - version
        - releaseStatus
        - date
    Link:
      type: object
      title: Link
      description: |
        Link that can be attached to packages or Open Resource Discovery resources.
      properties:
        title:
          type: string
          minLength: 1
          description: |-
            Human readable title of the link.

            MUST be unique within the collection of links provided.
          example: APIs for SAP S/4HANA
        url:
          type: string
          format: uri
          description: '[URL](https://tools.ietf.org/html/rfc3986) of the link.'
          example: https://blogs.sap.com/2018/04/11/testing-of-s4hana-inventory-management-odata-apis-via-sap-api-hub/
        description:
          type: string
          minLength: 1
          description: Full description, notated in [CommonMark](https://spec.commonmark.org/) (Markdown)
          example: |
            This gives you an overview on where to find which kind of APIs in SAP S/4HANA.
      required:
        - title
        - url
      example:
        url: https://blogs.sap.com/2018/04/11/testing-of-s4hana-inventory-management-odata-apis-via-sap-api-hub/
        title: APIs for SAP S/4HANA
        description: This gives you an overview on where to find which kind of APIs in SAP S/4HANA.
    PackageLink:
      type: object
      title: Package Link
      description: |-
        Links with specific semantic meaning that are related to `Package`.

        If a generic `Link` can also be expressed via `PackageLink`, the latter MUST be chosen.
      properties:
        type:
          type: string
          description: Package link type
          enum:
            - terms-of-service
            - license
            - client-registration
            - payment
            - sandbox
            - service-level-agreement
            - support
            - custom
          example: terms-of-service
        customType:
          type: string
          description: |-
            If the fixed `type` enum values need to be extended, an arbitrary `customType` can be provided.

            MUST be a valid [Specification ID](../index.md#specification-id).

            MUST only be provided if `type` is set to `custom`.
          pattern: ^([a-z0-9]+(?:[.][a-z0-9]+)*):([a-zA-Z0-9._\-]+):v([0-9]+)$
          maxLength: 255
          example: sap:custom-definition-format:v1
        url:
          type: string
          format: uri
          description: '[URL](https://tools.ietf.org/html/rfc3986) to the PackageLink. For more information, see `type`.'
          example: >-
            https://accounts.sap.com/ui/public/showRegisterForm?spName=https://netweaver.ondemand.com&targetUrl=https://cloudintegration.hana.ondemand.com
      required:
        - type
        - url
      example:
        type: terms-of-service
        url: https://www.sap.com/corporate/en/legal/terms-of-use.html
    APIEventResourceLink:
      type: object
      title: API and Event Resource Link
      description: |-
        Links with specific semantic meaning that are related to API or event resources.

        If a generic `Link` can also be expressed via an `APIEventResourceLink`, the latter MUST be chosen.
      properties:
        type:
          type: string
          description: >-
            See also: [WADG0001 WebAPI type
            extension](https://webapi-discovery.github.io/rfcs/rfc0001.html#webapiactions)
          enum:
            - api-documentation
            - authentication
            - client-registration
            - console
            - payment
            - service-level-agreement
            - support
            - custom
          example: console
        customType:
          type: string
          description: |-
            If the fixed `type` enum values need to be extended, an arbitrary `customType` can be provided.

            MUST be a valid [Specification ID](../index.md#specification-id).

            MUST only be provided if `type` is set to `custom`.
          pattern: ^([a-z0-9]+(?:[.][a-z0-9]+)*):([a-zA-Z0-9._\-]+):v([0-9]+)$
          maxLength: 255
          example: sap:custom-definition-format:v1
        url:
          type: string
          format: uri-reference
          description: >-
            [URL reference](https://tools.ietf.org/html/rfc3986#section-4.1) (URL or relative reference) to the endpoint
            or UI for the action.


            If the link is relative to base URL, it is RECOMMENDED to provide a relative URL to it, starting with `/`.
          example: /some/relative/url
      required:
        - url
        - type
      example:
        type: api-documentation
        url: https://api.sap.com/api/API_OPLACCTGDOCITEMCUBE_SRV/resource
    DataProductLink:
      type: object
      title: Data Product Link
      description: |-
        Links with specific semantic meaning that are related to Data Product resources.
        If a generic `Link` can also be expressed via `DataProductLink`, the latter MUST be chosen.
      properties:
        type:
          type: string
          description: >-
            API action type.

            See also: [WADG0001 WebAPI type
            extension](https://webapi-discovery.github.io/rfcs/rfc0001.html#webapiactions)
          enum:
            - payment
            - service-level-agreement
            - support
            - custom
          example: support
        customType:
          type: string
          description: |-
            If the fixed `type` enum values need to be extended, an arbitrary `customType` can be provided.

            MUST be a valid [Specification ID](../index.md#specification-id).

            MUST only be provided if `type` is set to `custom`.
          pattern: ^([a-z0-9]+(?:[.][a-z0-9]+)*):([a-zA-Z0-9._\-]+):v([0-9]+)$
          maxLength: 255
          example: sap:custom-definition-format:v1
        url:
          type: string
          format: uri-reference
          description: >-
            [URL reference](https://tools.ietf.org/html/rfc3986#section-4.1) (URL or relative reference) to the endpoint
            or UI for the action.

            If the link is relative to base URL, it is RECOMMENDED to provide a relative URL to it, starting with `/`.
          example: /some/relative/url
      required:
        - url
        - type
      example:
        type: support
        url: https://support.sap.com/CIC_DP_RT/issue/
    Tombstone:
      type: object
      title: Tombstone
      description: |-
        A tombstone indicates that a previously published ORD resource or taxonomy has been removed / decommissioned.
        This MUST be indicated explicitly, so ORD aggregators and consumers can learn about the removal.

        It MUST be kept sufficiently long so that all ORD aggregators can learn about the tombstone.
        After that it MAY be removed.
      properties:
        ordId:
          type: string
          description: '[ORD ID](../index.md#ord-id) of the ORD resource/taxonomy that has been removed.'
          pattern: >-
            ^([a-z0-9]+(?:[.][a-z0-9]+)*):(package|consumptionBundle|product|vendor|apiResource|eventResource|capability|entityType|integrationDependency|dataProduct):([a-zA-Z0-9._\-]+):(v0|v[1-9][0-9]*|)?$
          maxLength: 255
          example: sap.xref:package:SomePackage:v1
        removalDate:
          type: string
          format: date-time
          description: >-
            The date when the ORD resource/taxonomy was removed.

            This is related to the `sunsetDate` that can be set to announce a resource as deprecated *before* the
            removal and setting of a tombstone.


            The date format MUST comply with [RFC 3339, section 5.6](https://tools.ietf.org/html/rfc3339#section-5.6).
          example: '2020-12-02T14:12:59Z'
        description:
          type: string
          minLength: 1
          description: |-
            Full description, notated in [CommonMark](https://spec.commonmark.org/) (Markdown).

            The description of a Tombstone MAY be added to the changelog of the removed resource by an ORD aggregator.
          example: |
            SAP S/4HANA Cloud, our next generation cloud ERP suite designed for
            in-memory computing, acts as a digital core, connecting your
            enterprise with people, business networks, the Internet of Things,
            Big Data, and more.
      required:
        - ordId
        - removalDate
      example:
        ordId: sap.s4:apiResource:API_RFQ_PROCESS_SRV:v2
        removalDate: '2020-12-02T14:12:59Z'
    SystemInstance:
      type: object
      title: System Instance
      description: |-
        A **system instance** is a concrete, running instance of a system type.
        In a multi-tenant system, this corresponds to a tenant.
      properties:
        baseUrl:
          type: string
          format: uri
          description: |-
            Optional [base URL](../index.md#def-base-url) of the **system instance**.
            By providing the base URL, all relative references in the document are resolved relative to it.

            The `baseUrl` MUST not contain a leading slash.

            MUST be provided if the base URL is not known to the ORD aggregators.
            MUST be provided when the document needs to be fully self contained, e.g. when used for manual imports.
          pattern: ^http[s]?:\/\/[^:\/\s]+\.[^:\/\s\.]+(:\d+)?(\/[a-zA-Z0-9-\._~]+)*$
          example: https://example-sap-system.com
        localId:
          type: string
          description: |-
            Optional local ID for the system instance, as known by the described system.

            In the context of a system instance, this is usually the local tenant id.
          maxLength: 255
          example: LocalTenantId123
        correlationIds:
          type: array
          description: >-
            Correlation IDs can be used to create a reference to related data in other repositories (especially to the
            system of record).


            MUST be a valid [Correlation ID](../index.md#correlation-id).
          items:
            type: string
            pattern: ^([a-z0-9]+(?:[.][a-z0-9]+)*):([a-zA-Z0-9._\-\/]+):([a-zA-Z0-9._\-\/]+)$
            maxLength: 255
          example:
            - sap.cld:tenant:741234567
        tags:
          type: array
          items:
            type: string
            pattern: ^[a-zA-Z0-9-_.\/ ]*$
            minLength: 1
          description: |-
            List of free text style tags.
            No special characters are allowed except `-`, `_`, `.`, `/` and ` `.

            Tags that are assigned to a `Package` are inherited to all of the ORD resources it contains.
          example:
            - storage
            - high-availability
        labels:
          $ref: '#/components/schemas/Labels'
        documentationLabels:
          $ref: '#/components/schemas/DocumentationLabels'
    AccessStrategy:
      type: object
      title: Access Strategy
      description: >-
        Defines the [access strategy](../../spec-extensions/access-strategies/) for accessing the ORD documents from the
        ORD provider.
      properties:
        type:
          type: string
          description: >-
            Defines the authentication/authorization strategy through which the referenced ORD Documents can be
            accessed.
          enum:
            - open
            - sap:cmp-mtls:v1
            - sap.businesshub:basic-auth:v1
            - custom
          example: open
        customType:
          type: string
          description: |-
            If the fixed `type` enum values need to be extended, an arbitrary `customType` can be provided.

            MUST be a valid [Specification ID](../index.md#specification-id).

            MUST only be provided if `type` is set to `custom`.
          pattern: ^([a-z0-9]+(?:[.][a-z0-9]+)*):([a-zA-Z0-9._\-]+):v([0-9]+)$
          maxLength: 255
          example: sap.xref:open-local-tenant-id:v1
        customDescription:
          type: string
          minLength: 1
          description: >-
            Human-readable description about how the access is set up, notated in
            [CommonMark](https://spec.commonmark.org/) (Markdown).


            MUST only be provided if `type` is set to `custom`.
          example: >-
            To set up the access to OData APIs, please refer to the [SAP Cloud for Customer OData
            API](https://help.sap.com/viewer/1364b70b9cbb417ea5e2d80e966d4f49/CLOUD/en-US) help pages."
      required:
        - type
    CredentialExchangeStrategy:
      type: object
      title: Credential Exchange Strategy
      description: |-
        The credential exchange strategy specifies how a set of credentials for a particular usage
        of the APIs in the consumption bundle can be obtained.
        Until a SAP-wide strategy for obtaining such credentials exists and is agreed upon,
        both LoBs and aggregators (namely Unified Customer Landscape) can define their own strategy specifications.

        While the actual flow in term of API calls can differ between the different strategies,
        the end goal would always be the possibility for automatically obtaining credentials for each client
        that would like to use the APIs from a particular bundle.
      properties:
        type:
          type: string
          description: The type of credential exchange strategy.
          enum:
            - custom
        customType:
          type: string
          description: |-
            If the fixed `type` enum values need to be extended, an arbitrary `customType` can be provided.

            MUST be a valid [Specification ID](../index.md#specification-id).

            MUST only be provided if `type` is set to `custom`.
          pattern: ^([a-z0-9]+(?:[.][a-z0-9]+)*):([a-zA-Z0-9._\-]+):v([0-9]+)$
          maxLength: 255
          example: sap.xref:credential-exchange:v1
        customDescription:
          type: string
          minLength: 1
          description: >-
            Human-readable description about how the credential exchange is achieved, notated in
            [CommonMark](https://spec.commonmark.org/) (Markdown).


            MUST only be provided if `type` is set to `custom`.
        callbackUrl:
          type: string
          format: uri
          description: >-
            [URL reference](https://tools.ietf.org/html/rfc3986#section-4.1) (URL or relative reference) to the
            credential exchange callback endpoint.


            This allows requesting a set of credentials that can be used for consuming all the APIs and Events that are
            part of the bundle.


            The interface contract/protocol is dependent and defined by the chosen `type`.


            Whenever a client wants to consume a resource within a particular bundle, this endpoint can be called to
            obtain the credentials that this client can use.


            The returned credentials MUST be valid for all resources that are part of the respective bundle.

            The endpoint SHOULD return a different set of credentials on each invocation.
          example: https://system-instance-1.com/credentials?scenario=SAP_COM_008
      required:
        - type
    Labels:
      title: Labels
      type: object
      description: |-
        Generic labels that can be applied to most ORD information.
        They are defined as an object that may have arbitrary keys.
        The value of a key is an array of strings.

        Labels can be used to attach technical information that cannot be expressed natively in ORD.
        An ORD aggregator should allow to categorize and query information based on the labels provided.

        If multiple parties rely on the existence of certain label information,
        standardization through ORD SHOULD be preferred.

        All labels attached to a `Package` will be inherited to the resources they contain.
        Duplicate labels will be merged by the ORD aggregator according to the following rules:
        * Values of the same label key will be merged.
        * Duplicate values of the same label key will be removed.
      example:
        label-key-1:
          - label-value-1
          - label-value-2
      x-patternProperties:
        ^[a-zA-Z0-9-_.]*$:
          type: array
          items:
            type: string
            minLength: 1
    DocumentationLabels:
      title: Documentation Labels
      type: object
      description: >-
        Generic documentation labels that can be applied to most ORD information.

        They are defined as an object that may have arbitrary keys.

        The value of a key is an array of [CommonMark](https://spec.commonmark.org/) (Markdown) text.


        Documentation Labels can be used to attach human readable documentation that cannot be expressed natively in
        ORD.

        A documentation tool (like an API Catalog) can use the documentation labels to provide generic documentation
        "snippets".

        Due to the given structure they can be displayed e.g. as tables.


        The key of the documentation Label is plain-text (MUST not contain line breaks) and denotes the subject matter
        that is described.

        The values (multiple can be provided for the same key) are [CommonMark](https://spec.commonmark.org/) (Markdown)
        text

        which describes the subject matter or lists options for the key.


        In contrast to regular labels, documentation labels are not meant to be used to categorize or query information.
      example:
        Scope Items:
          - '[Basic Bank Account Management (BFA)](https://rapid.sap.com/bp/#/scopeitems/BFA \" Link To BP \")'
      x-patternProperties:
        ^.*$:
          type: array
          items:
            type: string
            minLength: 1
    Extensible:
      title: Extensible
      type: object
      description: |-
        Contains information about the extensibility of this resource.

        If applicable, a description and further resources about extending this resource are provided.
      properties:
        supported:
          type: string
          enum:
            - 'no'
            - manual
            - automatic
          description: >-
            This property defines whether the resource is extensible.


            **Not extensible** means that the data model of the resource (i.e. API or event) cannot be extended with
            custom fields.

            **Manually extensible** means that in addition to defining a custom field, manual activities to include the
            field in the data model of the resource (i.e. API or event) are required. E.g. using a specific mapping tool
            or by selecting the resource in the data model extension tool.

            **Automatically extensible** means that after defining a custom field in the local domain model, the
            resource (i.e. API or event) is automatically extended as part of the default extension field definition.
        description:
          type: string
          minLength: 1
          description: >-
            A description about the extensibility capabilities of this API, notated in
            [CommonMark](https://spec.commonmark.org/) (Markdown).


            This description may contain detailed steps on how to extend the API.

            Links to external resources can be provided within the description as markdown links.


            This description MUST be provided if `supported` is set to `manual` or `automatic`.
          example: Please find the extensibility documentation [here](#here)
      required:
        - supported
      example:
        supported: manual
        description: "API can be extended by custom fields on the following business contexts (field usage for this API needs to be selected):\r\n* Procurement: Purchasing Document (MM_PURDOC_HEADER)\r\n* Procurement: Purchasing Document Item (MM_PURDOC_ITEM)\r\n\r\n[How to add an extension field to an API](https://help.sap.com/viewer/9a281eac983f4f688d0deedc96b3c61c/latest/en-US/57909455bf7c4fdd8bcf48d76c1eae33.html)"
    EntityTypeMapping:
      title: Entity Type Mapping
      type: object
      description: >-
        An API or Event resource may optionally define its `entityTypeMappings`.

        This is used to map and correlate the API models to the underlying, conceptual **entity types**.


        If the mapping from API resource to entity types is not defined,

        certain use-cases that rely on this explicit connection will not be possible.


        This mapping is meant to be rather fine granular.

        Therefore, the mapping needs to be done on basis of one of the referenced resource definitions,

        as only there we know the details and the actual contents of the API Model of the API resource.


        For the various resource definition formats the selection of API models may need to be expressed differently.

        As a consequence, there are different types of selectors that are specialized toward certain resource definition
        formats.


        The target of the mapping is a correlation to an entity type via a [Correlation
        ID](https://sap.github.io/open-resource-discovery/#/v1/README?id=correlation-id)

        or to an [ORD ID] of an entity type.

        It is assumed that the entity types are described in more detail or on a different abstraction level via
        metadata.

        When the correlation ID is used, an ORD consumer may need to know how to access the entity type metadata through
        conventions.

        This can be determined either by the namespace of the correlation ID,

        or through a defined and known `implementationStandard` that can resolve the `localId` fragment of the
        correlation ID .


        At SAP, the metadata about entity types could be retrieved via the CSN_EXPOSURE service.

        To indicate this, the service needs to be implemented and described in ORD with `implementationStandard` set to
        `sap:csn-exposure:v1`).


        ODM 2.0 relies on the entity type mappings and uses the the mapping to express the relationship of an API to the

        corresponding ODM entity. ORD consumers like SAP Business Accelerator Hub consume the mapping to make the
        relationships navigatable for customers.
      properties:
        apiModelSelectors:
          type: array
          description: |-
            List of selectors for API models within an API Resource.
            If multiple selectors are given, every selected API model maps to the entity type target(s).
            If omitted, the complete API resource will be mapped to the `entityTypeTargets` (less specific).

            Multiple selectors can be useful, e.g. with a CRUD REST API, to combine the similar API models.

            Depending on the chosen API protocol and the available resource definition formats,
            different kind of selectors need to be used.
          items:
            anyOf:
              - $ref: '#/components/schemas/ApiModelSelectorOData'
              - $ref: '#/components/schemas/ApiModelSelectorJsonPointer'
        entityTypeTargets:
          type: array
          description: >-
            List of entity types the ORD resource maps to.

            If `apiModelSelectors` are given, the mapping is more precise by also pointing to the specific model in the
            API.


            If multiple entity types are defined as the mapping target,

            all of them can be at least partially mapped to the source API model(s).


            Entity types can be referenced using either using an [ORD
            ID](https://sap.github.io/open-resource-discovery/spec-v1/#ord-id)
            or a [Correlation
            ID](https://sap.github.io/open-resource-discovery/spec-v1/#correlation-id).
          items:
            anyOf:
              - $ref: '#/components/schemas/EntityTypeOrdIdTarget'
              - $ref: '#/components/schemas/EntityTypeCorrelationIdTarget'
          minItems: 1
      required:
        - entityTypeTargets
    ApiModelSelectorOData:
      title: API Model Selector (OData)
      type: object
      description: |-
        API Model Selector for OData, using entity set names for the selection.

        MUST only be used if the API Resource provides an API Resource Definition of type `edmx`.
      properties:
        type:
          type: string
          description: The type for OData selectors is fixed to `odata`.
          enum:
            - odata
        entitySetName:
          type: string
          description: |-
            OData entity set name.

            As defined in the EDMX, e.g. `<EntitySet Name="AttachmentContent">`.
          minLength: 1
          example: AttachmentContent
      required:
        - type
        - entitySetName
      example:
        type: odata
        entitySetName: AttachmentContent
    ApiModelSelectorJsonPointer:
      title: API Model Selector (JSON Pointer)
      type: object
      description: >-
        Generic API Model Selector for JSON / YAML based resource definitions.

        It uses a [JSON Pointer](https://datatracker.ietf.org/doc/html/rfc6901) that points to the

        entity type description within the resource definition.


        The JSON Pointer always to refer to the structure of the document as originally provided, before further
        post-processing like resolving $ref properties.


        MUST only be used if the API Resource provides an API Resource Definition of media type `application/json` or
        `text/yaml`.
      properties:
        type:
          type: string
          description: The type for generic JSON Pointer selectors is fixed to `json-pointer`.
          enum:
            - json-pointer
        jsonPointer:
          type: string
          description: >-
            JSON Pointer to the entity type schema / description within the resource definition format.


            MUST be a valid JSON Pointer according to [RFC6901](https://datatracker.ietf.org/doc/html/rfc6901).


            The JSON pointers MUST point to each instance of the mapped entity type in the resource definition file,
            BEFORE `$ref` JSON Schema References are resolved (dereferenced).
          minLength: 1
          example: '#/objects/schemas/<schema name>'
      required:
        - type
        - jsonPointer
      example:
        type: json-pointer
        jsonPointer: '#/objects/schemas/AttachmentContent'
    EntityTypeOrdIdTarget:
      title: Entity Type Target (ORD ID)
      type: object
      description: >-
        Define which entity type is the target of an entity type mapping


        Entity types can be referenced using a [ORD
        ID](https://sap.github.io/open-resource-discovery/spec-v1/#ord-id) of
        an entity type.
      properties:
        ordId:
          type: string
          description: |-
            The [ORD ID](../index.md#ord-id) is a stable, globally unique ID for ORD resources or taxonomy.

            It MUST be a valid [ORD ID](../index.md#ord-id) of the appropriate ORD type.
          pattern: ^([a-z0-9]+(?:[.][a-z0-9]+)*):(entityType):([a-zA-Z0-9._\-]+):(v0|v[1-9][0-9]*)$
          maxLength: 255
          example: sap.odm:entityType:BusinessPartner:v1
      required:
        - ordId
    EntityTypeCorrelationIdTarget:
      title: Entity Type Target (Correlation ID)
      type: object
      description: >-
        Define which entity type is the target of an entity type mapping


        Entity types can be referenced using a [Correlation
        ID](https://sap.github.io/open-resource-discovery/spec-v1/#correlation-id).
      properties:
        correlationId:
          type: string
          pattern: ^([a-z0-9]+(?:[.][a-z0-9]+)*):([a-zA-Z0-9._\-\/]+):([a-zA-Z0-9._\-\/]+)$
          maxLength: 255
          example: sap.s4:csnEntity:Attachment
      required:
        - correlationId
    Configuration:
      title: ORD Configuration
      description: >-
        The ORD configuration response will indicate that ORD is available for the given host and how to proceed with
        the discovery.


        Most notably, the ORD configuration will tell an ORD consumer which ORD documents are available and where/how
        they can be accessed.


        The configuration endpoint is a [Well-Known URI](https://tools.ietf.org/html/rfc8615#section-3) discovery
        mechanism.
      type: object
      properties:
        $schema:
          type: string
          format: uri-reference
          description: |-
            An optional URL to the ORD document schema (defined as JSON Schema).
            If given, this enables code intelligence and validation in supported editors (like VSCode) and tools.
          example: >-
            https://raw.githubusercontent.com/SAP/open-resource-discovery/main/static/spec-v1/interfaces/Configuration.schema.json
        baseUrl:
          type: string
          format: uri
          description: >-
            Optional [base URL](../index.md#def-base-url) that can be used to resolve the relative URLs to the ORD
            Documents.


            The `baseUrl` MUST not contain a leading slash.


            If you do not provide this property, the base URL is assumed to be the URL of the config endpoint without
            `/.well-known/open-resource-discovery` suffix.

            This implies that either a `baseUrl` or only absolute URLs MUST be provided when no standardized well-known
            URI is used.

            If both a `baseUrl` and a well-known URI is provided, the explicit `baseUrl` takes precedence.
          pattern: ^http[s]?:\/\/[^:\/\s]+\.[^:\/\s\.]+(:\d+)?(\/[a-zA-Z0-9-\._~]+)*$
          example: https://example-sap-system.com
        openResourceDiscoveryV1:
          $ref: '#/components/schemas/OpenResourceDiscoveryV1'
      required:
        - openResourceDiscoveryV1
    OpenResourceDiscoveryV1:
      type: object
      title: ORD V1 Support
      description: The existence of this version indicates that Open Resource Discovery is supported in Version 1.x
      properties:
        documents:
          type: array
          description: >-
            List of all ORD documents that can be retrieved.


            While it is possible to describe everything in one big ORD document, for bigger services/use cases it might
            be preferable to split the information into multiple documents.


            For more details how to implement this correctly, please refer to the [ORD configuration
            endpoint](../index.md#ord-configuration-endpoint) section and the [considerations on the granularity of ORD
            documents](../index.md#considerations-on-the-granularity-of-ord-documents).
          items:
            $ref: '#/components/schemas/V1DocumentDescription'
    V1DocumentDescription:
      type: object
      title: ORD V1 Document Description
      description: Describes an [ORD Document](../index.md#ord-document) that is available for pull transport consumption.
      properties:
        url:
          type: string
          format: uri-reference
          description: |-
            URL or relative URL to the ORD document (provided by an ORD document endpoint).

            It is RECOMMENDED to provide a relative URL (to base URL), starting with `/`.
            If a `baseUrl` is given, the relative URLs will be resolved with it.

            If the URL is not relative to the system providing this information or no well-known URI is used,
            either the baseUrl or a full URL to the document MUST be provided.
          example: /open-resource-discovery/v1/documents/example1
        systemInstanceAware:
          type: boolean
          description: >-
            Whether the information in the ORD document is **system instance aware**.


            This is the case when the provided ORD document potentially differs between **system instances**.

            Please note that if a system does not support multitenancy, most likely each system instance has its own

            URL and different system instances could even be deployed in a different state (version).

            If those conditions apply, `systemInstanceAware` MUST be set to true.


            An ORD aggregator that represents a system instance aware perspective MUST fetch a system instance aware ORD
            document,

            not just once per system type but once per **system instance**.


            Please note that you can define system instance awareness also on the level of an ORD resource.

            It is even possible and valid to have an ORD document that is NOT system instance aware to contain resources
            that are.

            This can be the case because the resource is described in separate resource definition formats which would
            change,

            while the ORD document itself would not change (the links to the resource definition files stay the same).


            If some ORD information is **system instance aware** and some is not,

            we RECOMMEND to split the information into separate documents and mark their system instance awareness
            accordingly.
          default: false
          example: true
        accessStrategies:
          type: array
          description: |-
            List of supported access strategies for retrieving the metadata from the ORD provider.

            An ORD Consumer/ORD Aggregator MAY freely choose any of the listed strategies.
          items:
            $ref: '#/components/schemas/AccessStrategy'
          minItems: 1
      required:
        - url
        - accessStrategies
